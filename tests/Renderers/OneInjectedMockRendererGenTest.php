<?php
namespace Box\TestScribe\Renderers;

/**
 * Generated by PHPUnit_test_Generator.
 */
class OneInjectedMockRendererGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Renderers\OneInjectedMockRenderer::genInjectedMockStatement
     * @covers \Box\TestScribe\Renderers\OneInjectedMockRenderer
     */
    public function testGenInjectedMockStatement()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\MockClass $mockMockClass1 */
        $mockMockClass1 = $this->shmock(
            '\\Box\\TestScribe\\MockClass',
            function (
                /** @var \Box\TestScribe\MockClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getClassNameBeingMocked();
                $mock->return_value('class_being_mocked');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getMockObjectName();
                $mock->return_value('mock_obj_name');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Renderers\MockRenderer $mockMockRenderer0 */
        $mockMockRenderer0 = $this->shmock(
            '\\Box\\TestScribe\\Renderers\\MockRenderer',
            function (
                /** @var \Box\TestScribe\Renderers\MockRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->renderAMock();
                $mock->return_value('code for mocking the mock object');
            }
        );
        $objectUnderTest = new \Box\TestScribe\Renderers\OneInjectedMockRenderer($mockMockRenderer0);
        $executionResult = $objectUnderTest->genInjectedMockStatement($mockMockClass1, 'inject_method_name');

        // Validate the execution result.

        $expected =
            'code for mocking the mock object' . "\n" .
            'inject_method_name(\'class_being_mocked\', $mock_obj_name);';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
