<?php
namespace Box\TestScribe\_fixture\_input;

/**
 * Generated by TestScribe.
 */
class CalculatorViaLocatorGenTest extends \Box\TestScribe\_fixture\TestCase
{
    /**
     * @covers \Box\TestScribe\_fixture\_input\CalculatorViaLocator::calculateWithACalculator
     * @covers \Box\TestScribe\_fixture\_input\CalculatorViaLocator
     */
    public function test_calculateWithACalculator()
    {
        // Setup mocks injected by the dependency management system.

        /** @var \Box\TestScribe\_fixture\_input\CalculatorWithState $mockCalculatorWithState */
        $mockCalculatorWithState = $this->shmock(
            '\\Box\\TestScribe\\_fixture\\_input\\CalculatorWithState',
            function (
                /** @var \Box\TestScribe\_fixture\_input\CalculatorWithState|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->add(2);
                $mock->return_value(3);
            }
        );
        \Box\TestScribe\_fixture\ServiceLocator::overwrite('\\Box\\TestScribe\\_fixture\\_input\\CalculatorWithState', $mockCalculatorWithState);

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\_fixture\_input\CalculatorViaLocator();

        $executionResult = $objectUnderTest->calculateWithACalculator(2);

        // Validate the execution result.

        $expected = 3;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
