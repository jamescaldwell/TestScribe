<?php
namespace Box\TestScribe\_fixture\_input;

/**
 * Generated by TestScribe.
 */
class CalculatorFactoryUsageGenTest extends \Box\TestScribe\_fixture\TestCase
{
    /**
     * @covers \Box\TestScribe\_fixture\_input\CalculatorFactoryUsage::calculateWithACalculator
     * @covers \Box\TestScribe\_fixture\_input\CalculatorFactoryUsage
     */
    public function test_calculateWithACalculator()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\_fixture\_input\CalculatorFactory $mockCalculatorFactory */
        $mockCalculatorFactory = $this->shmock(
            '\\Box\\TestScribe\\_fixture\\_input\\CalculatorFactory',
            function (
                /** @var \Box\TestScribe\_fixture\_input\CalculatorFactory|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\_fixture\_input\CalculatorWithState $mockCalculatorWithState */
                $mockCalculatorWithState = $this->shmock(
                    '\\Box\\TestScribe\\_fixture\\_input\\CalculatorWithState',
                    function (
                        /** @var \Box\TestScribe\_fixture\_input\CalculatorWithState|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->add(3);
                        $mock->return_value(5);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getCalculator(2);
                $mock->return_value($mockCalculatorWithState);
            }
        );

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\_fixture\_input\CalculatorFactoryUsage();

        $executionResult = $objectUnderTest->calculateWithACalculator($mockCalculatorFactory, 2, 3);

        // Validate the execution result.

        $expected = 5;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
