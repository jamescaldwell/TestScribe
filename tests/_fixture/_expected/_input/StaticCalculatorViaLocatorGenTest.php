<?php
namespace Box\TestScribe\_fixture\_input;

/**
 * Generated by TestScribe.
 */
class StaticCalculatorViaLocatorGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\_fixture\_input\StaticCalculatorViaLocator::calculateWithACalculator
     * @covers \Box\TestScribe\_fixture\_input\StaticCalculatorViaLocator
     */
    public function test_calculateWithACalculator()
    {
        // Setup mocks injected by the dependency management system.

        /** @var \Box\TestScribe\_fixture\_input\StaticCalculator $mockStaticCalculator1 */
        $mockStaticCalculator1 = $this->shmock_class(
            '\\Box\\TestScribe\\_fixture\\_input\\StaticCalculator',
            function (
                /** @var \Box\TestScribe\_fixture\_input\StaticCalculator|\Shmock\ClassBuilderStaticClass $shmock */
                $shmock
            ) {
                $shmock->order_matters();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->add(1, 2);
                $mock->return_value(3);
            }
        );
        \Box\TestScribe\_fixture\StaticServiceLocator::overwrite('\Box\TestScribe\_fixture\_input\StaticCalculator', $mockStaticCalculator1);

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\_fixture\_input\StaticCalculatorViaLocator();

        $executionResult = $objectUnderTest->calculateWithACalculator(1, 2);

        // Validate the execution result.

        $expected = 3;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
