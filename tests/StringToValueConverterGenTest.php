<?php
namespace Box\TestScribe;


/**
 * Generated by PHPUnit_test_Generator.
 */
class StringToValueConverterGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertBoolean()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('true', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
true
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertInteger()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('1', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
1
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }

    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertArray()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('["a", "b"]', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
array (
  0 => 'a',
  1 => 'b',
)
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertNull()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('null', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
NULL
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertArrayWithIntegerAsAValue()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('["a" => 2]', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
array (
  'a' => 2,
)
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertArrayInArray()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('["a" => ["b" => [ 1, 2]]]', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
array (
  'a' => 
  array (
    'b' => 
    array (
      0 => 1,
      1 => 2,
    ),
  ),
)
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }

    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertString()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('"ab"', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
'ab'
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\StringToValueConverter::convert
     */
    public function testConvertStringWithSingleQuote()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new \Box\TestScribe\StringToValueConverter();
        $executionResult = $objectUnderTest->convert('\'ab\'', []);
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
'ab'
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }
}
