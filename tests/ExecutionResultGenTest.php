<?php
namespace Box\TestScribe;

/**
 * Generated by PHPUnit_test_Generator.
 */
class ExecutionResultGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\ExecutionResult::jsonSerialize
     * @covers \Box\TestScribe\ExecutionResult
     */
    public function testJsonSerialize_no_mocks_no_exception()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Arguments $mockArguments1 */
        $mockArguments1 = $this->shmock(
            '\\Box\\TestScribe\\Arguments',
            function (
                /** @var \Box\TestScribe\Arguments|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->jsonSerialize();
                $mock->return_value('constructor args');
            }
        );

        /** @var \Box\TestScribe\Arguments $mockArguments2 */
        $mockArguments2 = $this->shmock(
            '\\Box\\TestScribe\\Arguments',
            function (
                /** @var \Box\TestScribe\Arguments|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->jsonSerialize();
                $mock->return_value('method args');
            }
        );

        $objectUnderTest = new \Box\TestScribe\ExecutionResult($mockArguments1, $mockArguments2, null, 1, null);
        $executionResult = $objectUnderTest->jsonSerialize();

        // Validate the execution result.

        $this->assertInternalType('array', $executionResult);
        $this->assertCount(5, $executionResult);
        $expected = '"constructor args"';
        $this->assertSame(
            $expected,
            $executionResult['constructorArguments'],
            'Variable ( executionResult[\'constructorArguments\'] ) doesn\'t have the expected value.'
        );
        $expected = '"method args"';
        $this->assertSame(
            $expected,
            $executionResult['methodArguments'],
            'Variable ( executionResult[\'methodArguments\'] ) doesn\'t have the expected value.'
        );
        $expected = 'null';
        $this->assertSame(
            $expected,
            $executionResult['mockClassUnderTest'],
            'Variable ( executionResult[\'mockClassUnderTest\'] ) doesn\'t have the expected value.'
        );
        $expected = 1;
        $this->assertSame(
            $expected,
            $executionResult['resultValue'],
            'Variable ( executionResult[\'resultValue\'] ) doesn\'t have the expected value.'
        );
        $expected = 'null';
        $this->assertSame(
            $expected,
            $executionResult['exception'],
            'Variable ( executionResult[\'exception\'] ) doesn\'t have the expected value.'
        );
    }
}
