<?php
namespace Box\TestScribe;


/**
 * Generated by PHPUnit_test_Generator on 2014-11-07 at 14:42:29.
 */
class PhpClassNameGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\PhpClassName::getNameSpace
     */
    public function testGetNameSpaceOneLevel()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new ClassInfo\PhpClassName('\\foo\\Hello');
        $executionResult = $objectUnderTest->getNameSpace();
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
'foo'
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }

    /**
     * @covers \Box\TestScribe\PhpClassName::getNameSpace
     */
    public function testGetNameSpaceTwoLevels()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new ClassInfo\PhpClassName('\\foo\\bar\\Hello');
        $executionResult = $objectUnderTest->getNameSpace();
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
'foo\\bar'
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\PhpClassName::getNameSpace
     */
    public function testGetNameSpaceNoNameSpace()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new ClassInfo\PhpClassName('Hello');
        $executionResult = $objectUnderTest->getNameSpace();
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
''
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\PhpClassName::getClassName
     */
    public function testGetClassName()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new ClassInfo\PhpClassName('\\foo\\Hello');
        $executionResult = $objectUnderTest->getClassName();
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
'Hello'
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\PhpClassName::getFullyQualifiedClassName
     */
    public function testGetFullyQualifiedClassName()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new ClassInfo\PhpClassName('\\foo\\bar\\Hello');
        $executionResult = $objectUnderTest->getFullyQualifiedClassName();
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
'\\foo\\bar\\Hello'
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }


    /**
     * @covers \Box\TestScribe\PhpClassName::getNameSpace
     */
    public function testGetEmptyNamespaceForFullyQualifiedToplevelClass()
    {
        // Setup mocks injected by the dependency management system when required.

        // Setup mocks for parameters to the method under test when required.

        // Setup mocks for the constructor of the class under test when required.

        $objectUnderTest = new ClassInfo\PhpClassName('\\Hello');
        $executionResult = $objectUnderTest->getNameSpace();
        $executionResultAsString = var_export($executionResult, true);
        $expectedString = <<<'MY_LONG_END_OF_TEXT_a1b9'
''
MY_LONG_END_OF_TEXT_a1b9;
        $this->assertSame(
            $expectedString,
            $executionResultAsString,
            "The execution result doesn't match the expectation."
        );
    }
}
