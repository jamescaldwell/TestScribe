<?php
namespace Box\TestScribe;


/**
 * Generated by TestScribe.
 */
class OutputGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\Output::write
     */
    public function testWrite()
    {
        // Setup mocks for parameters to the constructor.

        $mockOutputInterface0 = $this->shmock(
            '\\Symfony\\Component\\Console\\Output\\OutputInterface',
            function (
                $shmock
                /** @var \Symfony\Component\Console\Output\OutputInterface|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

                $shmock->write('in', false, 0);
            }
        );

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Output($mockOutputInterface0);
        $executionResult = $objectUnderTest->write('in');

        // Validate the execution result.

        $expected = NULL;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers Box\TestScribe\Output::writeln
     */
    public function testWriteln()
    {
        // Setup mocks for parameters to the constructor.

        $mockOutputInterface0 = $this->shmock(
            '\\Symfony\\Component\\Console\\Output\\OutputInterface',
            function (
                $shmock
                /** @var \Symfony\Component\Console\Output\OutputInterface|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

                $shmock->writeln('in', 0);
            }
        );

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Output($mockOutputInterface0);
        $executionResult = $objectUnderTest->writeln('in');

        // Validate the execution result.

        $expected = NULL;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers \Box\TestScribe\Output::writeStartSeparator
     * @covers \Box\TestScribe\Output
     */
    public function testWriteStartSeparator()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Symfony\Component\Console\Output\OutputInterface $mockOutputInterface1 */
        $mockOutputInterface1 = $this->shmock(
            '\\Symfony\\Component\\Console\\Output\\OutputInterface',
            function (
                /** @var \Symfony\Component\Console\Output\OutputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                $shmock->writeln('--------------------------------------------------');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Output($mockOutputInterface1);

        $executionResult = $objectUnderTest->writeStartSeparator();

        // Validate the execution result.

        $expected = NULL;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Output::writeEndSeparator
     * @covers \Box\TestScribe\Output
     */
    public function testWriteEndSeparator()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Symfony\Component\Console\Output\OutputInterface $mockOutputInterface1 */
        $mockOutputInterface1 = $this->shmock(
            '\\Symfony\\Component\\Console\\Output\\OutputInterface',
            function (
                /** @var \Symfony\Component\Console\Output\OutputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                $shmock->writeln('==================================================');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Output($mockOutputInterface1);

        $executionResult = $objectUnderTest->writeEndSeparator();

        // Validate the execution result.

        $expected = NULL;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
