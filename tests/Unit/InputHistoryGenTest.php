<?php
namespace Box\TestScribe;

/**
 * Generated by TestScribe.
 */
class InputHistoryGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\InputHistory::saveHistoryToFile
     */
    public function testSaveHistoryToFile()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\InputHistory\InputHistoryPersistence $mockInputHistoryPersistence0 */
        $mockInputHistoryPersistence0 = $this->shmock(
            '\\Box\\TestScribe\\InputHistory\\InputHistoryPersistence',
            function (
                /** @var \Box\TestScribe\InputHistory\InputHistoryPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\InputHistory\InputHistoryData $mockInputHistoryData2 */
                $mockInputHistoryData2 = $this->shmock(
                    '\\Box\\TestScribe\\InputHistory\\InputHistoryData',
                    function (
                        /** @var \Box\TestScribe\InputHistory\InputHistoryData|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        // Keep track of the order of calls made on this mock.
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadHistory();
                $mock->return_value($mockInputHistoryData2);
                $shmock->saveHistory($mockInputHistoryData2);
            }
        );
        $objectUnderTest = new InputHistory\InputHistory($mockInputHistoryPersistence0);
        $objectUnderTest->saveHistoryToFile();
    }

    /**
     * @covers Box\TestScribe\InputHistory::getInputStringFromHistory
     */
    public function testGetInputStringFromHistory()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\InputHistory\InputHistoryPersistence $mockInputHistoryPersistence0 */
        $mockInputHistoryPersistence0 = $this->shmock(
            '\\Box\\TestScribe\\InputHistory\\InputHistoryPersistence',
            function (
                /** @var \Box\TestScribe\InputHistory\InputHistoryPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\InputHistory\InputHistoryData $mockInputHistoryData2 */
                $mockInputHistoryData2 = $this->shmock(
                    '\\Box\\TestScribe\\InputHistory\\InputHistoryData',
                    function (
                        /** @var \Box\TestScribe\InputHistory\InputHistoryData|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        // Keep track of the order of calls made on this mock.
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getInputStringFromHistory('s', 'i');
                        $mock->return_value('a');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadHistory();
                $mock->return_value($mockInputHistoryData2);
            }
        );
        $objectUnderTest = new InputHistory\InputHistory($mockInputHistoryPersistence0);
        $executionResult = $objectUnderTest->getInputStringFromHistory('s', 'i');

        // Validate the execution result.

        $expected = 'a';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers Box\TestScribe\InputHistory::setInputStringToHistory
     */
    public function testSetInputStringToHistory()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\InputHistory\InputHistoryPersistence $mockInputHistoryPersistence0 */
        $mockInputHistoryPersistence0 = $this->shmock(
            '\\Box\\TestScribe\\InputHistory\\InputHistoryPersistence',
            function (
                /** @var \Box\TestScribe\InputHistory\InputHistoryPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\InputHistory\InputHistoryData $mockInputHistoryData2 */
                $mockInputHistoryData2 = $this->shmock(
                    '\\Box\\TestScribe\\InputHistory\\InputHistoryData',
                    function (
                        /** @var \Box\TestScribe\InputHistory\InputHistoryData|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        // Keep track of the order of calls made on this mock.
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        $shmock->setInputStringToHistory('s', 'i', 'a');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadHistory();
                $mock->return_value($mockInputHistoryData2);
            }
        );
        $objectUnderTest = new InputHistory\InputHistory($mockInputHistoryPersistence0);
        $objectUnderTest->setInputStringToHistory('s', 'i', 'a');
    }

}
