<?php
namespace Box\TestScribe;

/**
 * Generated by PHPUnit_test_Generator.
 */
class MockClassServiceInfoSaverGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;


    /**
     * @covers Box\TestScribe\MockClassServiceInfoSaver::gatherAndSaveCallInfo
     */
    public function testGatherAndSaveCallInfo()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\MockClass $mockMockClass2 */
        $mockMockClass2 = $this->shmock(
            '\\Box\\TestScribe\\MockClass',
            function (
                /** @var \Box\TestScribe\MockClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\PhpClass $mockPhpClass4 */
                $mockPhpClass4 = $this->shmock(
                    '\\Box\\TestScribe\\PhpClass',
                    function (
                        /** @var \Box\TestScribe\PhpClass|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getPhpClass();
                $mock->return_value($mockPhpClass4);
                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getClassNameBeingMocked();
                $mock->return_value('foo\barClass');
                $shmock->saveInvocationInformation();
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\InputValueGetter $mockInputValueGetter0 */
        $mockInputValueGetter0 = $this->shmock(
            '\\Box\\TestScribe\\InputValueGetter',
            function (
                /** @var \Box\TestScribe\InputValueGetter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\InputValue $mockInputValue7 */
                $mockInputValue7 = $this->shmock(
                    '\\Box\\TestScribe\\InputValue',
                    function (
                        /** @var \Box\TestScribe\InputValue|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getValue();
                        $mock->return_value(1);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->get();
                $mock->return_value($mockInputValue7);
            }
        );
        /** @var \Box\TestScribe\MethodHelper $mockMethodHelper1 */
        $mockMethodHelper1 = $this->shmock(
            '\\Box\\TestScribe\\MethodHelper',
            function (
                /** @var \Box\TestScribe\MethodHelper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Method $mockMethod5 */
                $mockMethod5 = $this->shmock(
                    '\\Box\\TestScribe\\Method',
                    function (
                        /** @var \Box\TestScribe\Method|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        // Set up mocks of return values.

                        /** @var \Box\TestScribe\PHPDoc\PHPDocType $mockPHPDocType6 */
                        $mockPHPDocType6 = $this->shmock(
                            '\\Box\\TestScribe\\PHPDoc\\PHPDocType',
                            function (
                                /** @var \Box\TestScribe\PHPDoc\PHPDocType|\Shmock\PHPUnitMockInstance $shmock */
                                $shmock
                            ) {
                                $shmock->order_matters();
                                $shmock->disable_original_constructor();
                                $shmock->dont_preserve_original_methods();

                            }
                        );

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getReturnType();
                        $mock->return_value($mockPHPDocType6);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->createFromMethodName();
                $mock->return_value($mockMethod5);
            }
        );
        $objectUnderTest = new \Box\TestScribe\MockClassServiceInfoSaver($mockInputValueGetter0, $mockMethodHelper1);
        $executionResult = $objectUnderTest->gatherAndSaveCallInfo($mockMockClass2, 'methodName', ['args']);

        // Validate the execution result.

        $expected = 1;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

}
