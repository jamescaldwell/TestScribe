<?php
namespace Box\TestScribe;


/**
 * Generated by PHPUnit_test_Generator.
 */
class EngineStarterGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\EngineStarter::configAndStart
     */
    public function testConfigAndStart()
    {
        // Setup mocks for parameters to the method under test.
        $mockInputInterface4 = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                $shmock
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

            }
        );
        $mockOutputInterface5 = $this->shmock(
            '\\Symfony\\Component\\Console\\Output\\OutputInterface',
            function (
                $shmock
                /** @var \Symfony\Component\Console\Output\OutputInterface|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

            }
        );
        // Setup mocks for parameters to the constructor.
        $mockContainer0 = $this->shmock(
            '\\DI\\Container',
            function (
                $shmock
                /** @var \DI\Container|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();
                $shmock->set();
                $shmock->set();

            }
        );
        $mockNewEngine1 = $this->shmock(
            '\\Box\\TestScribe\\Engine',
            function (
                $shmock
                /** @var \Box\TestScribe\Engine|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();
                $shmock->start();

            }
        );
        $mockConfigurator2 = $this->shmock(
            '\\Box\\TestScribe\\Configurator',
            function (
                $shmock
                /** @var \Box\TestScribe\Configurator|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();
                // Set up mocks of return values.
                $mockGlobalComputedConfig6 = $this->shmock(
                    '\\Box\\TestScribe\\GlobalComputedConfig',
                    function (
                        $shmock
                        /** @var \Box\TestScribe\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                    ) {
                        // Keep track of the order of calls made on this mock.
                        $shmock->order_matters();
                        // Mock all methods, return null by default unless overwritten by the expectations below.
                        $shmock->dont_preserve_original_methods();
                        $shmock->disable_original_constructor();

                    }
                );
                $mock = $shmock->config();
                /** @var $mock \Shmock\Spec */
                $mock->return_value($mockGlobalComputedConfig6);

            }
        );
        $mockAppInstance3 = $this->shmock(
            '\\Box\\TestScribe\\AppInstance',
            function (
                $shmock
                /** @var \Box\TestScribe\AppInstance|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

            }
        );
        $objectUnderTest = new \Box\TestScribe\EngineStarter($mockContainer0, $mockNewEngine1, $mockConfigurator2, $mockAppInstance3);
        $executionResult = $objectUnderTest->configAndStart($mockInputInterface4, $mockOutputInterface5);
        $expected = NULL; 
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
