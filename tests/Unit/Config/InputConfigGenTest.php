<?php
namespace Box\TestScribe\Config;

/**
 * Generated by TestScribe.
 */
class InputConfigGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Config\InputConfig::getInputParams
     * @covers \Box\TestScribe\Config\InputConfig
     */
    public function test_getInputParams()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface4 */
        $mockInputInterface4 = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getArgument('class-source');
                $mock->return_value('input source file path');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getArgument('method');
                $mock->return_value('method_name');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper1 */
        $mockFileFunctionWrapper1 = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->realpath('input source file path');
                $mock->return_value('real file path');
            }
        );

        /** @var \Box\TestScribe\Config\ClassExtractor $mockClassExtractor2 */
        $mockClassExtractor2 = $this->shmock(
            '\\Box\\TestScribe\\Config\\ClassExtractor',
            function (
                /** @var \Box\TestScribe\Config\ClassExtractor|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getClassName('real file path', 'method_name');
                $mock->return_value('full_class_name');
            }
        );

        /** @var \Box\TestScribe\Output $mockOutput3 */
        $mockOutput3 = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeln('Testing the method ( method_name ) of the class ( full_class_name ).');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\InputConfig($mockFileFunctionWrapper1, $mockClassExtractor2, $mockOutput3);

        $executionResult = $objectUnderTest->getInputParams($mockInputInterface4);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Config\\ConfigParams',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{"file path":"real file path","class name":"full_class_name","method name":"method_name"}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
