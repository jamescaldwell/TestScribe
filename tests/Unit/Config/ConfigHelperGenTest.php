<?php
namespace Box\TestScribe\Config;

/**
 * Generated by TestScribe.
 */
class ConfigHelperGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Config\ConfigHelper::loadBootstrapFile
     * @covers \Box\TestScribe\Config\ConfigHelper
     */
    public function testLoadBootstrapFile()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface3 */
        $mockInputInterface3 = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('bootstrap');
                $mock->return_value('bfile');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper1 */
        $mockFileFunctionWrapper1 = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('bfile');
                $mock->return_value(true);
            }
        );

        /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper $mockFunctionWrapper2 */
        $mockFunctionWrapper2 = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->includeFile('bfile');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\ConfigHelper($mockFileFunctionWrapper1, $mockFunctionWrapper2);

        $objectUnderTest->loadBootstrapFile($mockInputInterface3);
    }

    /**
     * @covers \Box\TestScribe\Config\ConfigHelper::getTestRootPath
     * @covers \Box\TestScribe\Config\ConfigHelper
     */
    public function testGetTestRootPath()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface3 */
        $mockInputInterface3 = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('test-source-root');
                $mock->return_value('root_path');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper1 */
        $mockFileFunctionWrapper1 = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->realpath('root_path');
                $mock->return_value('real_root');
            }
        );

        /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper $mockFunctionWrapper2 */
        $mockFunctionWrapper2 = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\ConfigHelper($mockFileFunctionWrapper1, $mockFunctionWrapper2);

        $executionResult = $objectUnderTest->getTestRootPath($mockInputInterface3);

        // Validate the execution result.

        $expected = 'real_root';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\ConfigHelper::getConfigFilePath
     * @covers \Box\TestScribe\Config\ConfigHelper
     */
    public function test_option_from_command_line ()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface */
        $mockInputInterface = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('config-file-path');
                $mock->return_value('config_path');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
        $mockFileFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper $mockFunctionWrapper */
        $mockFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\ConfigHelper($mockFileFunctionWrapper, $mockFunctionWrapper);

        $executionResult = $objectUnderTest->getConfigFilePath($mockInputInterface);

        // Validate the execution result.

        $expected = 'config_path';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\ConfigHelper::getConfigFilePath
     * @covers \Box\TestScribe\Config\ConfigHelper
     */
    public function test_default_config_from_tests_dir()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface */
        $mockInputInterface = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('config-file-path');
                $mock->return_value('');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
        $mockFileFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('tests/test_scribe_config.yaml');
                $mock->return_value(true);
            }
        );

        /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper $mockFunctionWrapper */
        $mockFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\ConfigHelper($mockFileFunctionWrapper, $mockFunctionWrapper);

        $executionResult = $objectUnderTest->getConfigFilePath($mockInputInterface);

        // Validate the execution result.

        $expected = 'tests/test_scribe_config.yaml';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\ConfigHelper::getConfigFilePath
     * @covers \Box\TestScribe\Config\ConfigHelper
     */
    public function test_config_from_test_dir()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface */
        $mockInputInterface = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('config-file-path');
                $mock->return_value('');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
        $mockFileFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('tests/test_scribe_config.yaml');
                $mock->return_value(false);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('test/test_scribe_config.yaml');
                $mock->return_value(true);
            }
        );

        /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper $mockFunctionWrapper */
        $mockFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\ConfigHelper($mockFileFunctionWrapper, $mockFunctionWrapper);

        $executionResult = $objectUnderTest->getConfigFilePath($mockInputInterface);

        // Validate the execution result.

        $expected = 'test/test_scribe_config.yaml';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\ConfigHelper::getConfigFilePath
     * @covers \Box\TestScribe\Config\ConfigHelper
     */
    public function test_config_not_found()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface */
        $mockInputInterface = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('config-file-path');
                $mock->return_value('');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
        $mockFileFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('tests/test_scribe_config.yaml');
                $mock->return_value(false);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('test/test_scribe_config.yaml');
                $mock->return_value(false);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('test_scribe_config.yaml');
                $mock->return_value(false);
            }
        );

        /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper $mockFunctionWrapper */
        $mockFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\ConfigHelper($mockFileFunctionWrapper, $mockFunctionWrapper);

        $executionResult = $objectUnderTest->getConfigFilePath($mockInputInterface);

        // Validate the execution result.

        $expected = '';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\ConfigHelper::getConfigFilePath
     * @covers \Box\TestScribe\Config\ConfigHelper
     */
    public function test_config_from_current_dir()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface */
        $mockInputInterface = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('config-file-path');
                $mock->return_value('');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
        $mockFileFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('tests/test_scribe_config.yaml');
                $mock->return_value(false);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('test/test_scribe_config.yaml');
                $mock->return_value(false);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->file_exists('test_scribe_config.yaml');
                $mock->return_value(true);
            }
        );

        /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper $mockFunctionWrapper */
        $mockFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\ConfigHelper($mockFileFunctionWrapper, $mockFunctionWrapper);

        $executionResult = $objectUnderTest->getConfigFilePath($mockInputInterface);

        // Validate the execution result.

        $expected = 'test_scribe_config.yaml';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
