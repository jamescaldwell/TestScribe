<?php
namespace Box\TestScribe\Config;

/**
 * Generated by TestScribe.
 */
class OutputTestNameGetterGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Config\OutputTestNameGetter::getTestName
     * @covers \Box\TestScribe\Config\OutputTestNameGetter
     */
    public function test_use_default_name()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass */
        $mockSpecsPerClass = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerClass',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod */
                $mockSpecsPerMethod = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getSpecs();
                        $mock->return_value([]);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecsPerMethodByName('method_name');
                $mock->return_value($mockSpecsPerMethod);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\RawInputWithPrompt $mockRawInputWithPrompt */
        $mockRawInputWithPrompt = $this->shmock(
            '\\Box\\TestScribe\\Input\\RawInputWithPrompt',
            function (
                /** @var \Box\TestScribe\Input\RawInputWithPrompt|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        /** @var \Box\TestScribe\Output $mockOutput */
        $mockOutput = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\OutputTestNameGetter($mockRawInputWithPrompt, $mockOutput);

        $executionResult = $objectUnderTest->getTestName('method_name', true, $mockSpecsPerClass);

        // Validate the execution result.

        $expected = 'test_method_name';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\OutputTestNameGetter::getTestName
     * @covers \Box\TestScribe\Config\OutputTestNameGetter
     */
    public function test_get_new_test_name()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass */
        $mockSpecsPerClass = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerClass',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod */
                $mockSpecsPerMethod = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getSpecs();
                        $mock->return_value([]);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecsPerMethodByName('method_name');
                $mock->return_value($mockSpecsPerMethod);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\RawInputWithPrompt $mockRawInputWithPrompt */
        $mockRawInputWithPrompt = $this->shmock(
            '\\Box\\TestScribe\\Input\\RawInputWithPrompt',
            function (
                /** @var \Box\TestScribe\Input\RawInputWithPrompt|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getString();
                $mock->return_value('user_selected_test_method_name');
            }
        );

        /** @var \Box\TestScribe\Output $mockOutput */
        $mockOutput = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeln('' . "\n" .
                'Enter the name of the test. It will be prefixed with \'test_\'' . "\n" .
                'Press enter to use the method name ( method_name ) as the default.');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\OutputTestNameGetter($mockRawInputWithPrompt, $mockOutput);

        $executionResult = $objectUnderTest->getTestName('method_name', false, $mockSpecsPerClass);

        // Validate the execution result.

        $expected = 'test_user_selected_test_method_name';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\OutputTestNameGetter::getTestName
     * @covers \Box\TestScribe\Config\OutputTestNameGetter
     */
    public function test_update_existing_test()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass */
        $mockSpecsPerClass = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerClass',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod */
                $mockSpecsPerMethod = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getSpecs();
                        $mock->return_value(['test1' =>'v', 'test2' => 'v2']);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecsPerMethodByName('method_name');
                $mock->return_value($mockSpecsPerMethod);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\RawInputWithPrompt $mockRawInputWithPrompt */
        $mockRawInputWithPrompt = $this->shmock(
            '\\Box\\TestScribe\\Input\\RawInputWithPrompt',
            function (
                /** @var \Box\TestScribe\Input\RawInputWithPrompt|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        /** @var \Box\TestScribe\Output $mockOutput */
        $mockOutput = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeln('Updating existing test ( test1 ).');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\OutputTestNameGetter($mockRawInputWithPrompt, $mockOutput);

        $executionResult = $objectUnderTest->getTestName('method_name', false, $mockSpecsPerClass);

        // Validate the execution result.

        $expected = 'test1';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
