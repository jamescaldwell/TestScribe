<?php
namespace Box\TestScribe\Config;

/**
 * Generated by TestScribe.
 */
class OptionsConfigGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Config\OptionsConfig::getOptions
     * @covers \Box\TestScribe\Config\OptionsConfig
     */
    public function test_getOptions()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface2 */
        $mockInputInterface2 = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOption('overwrite-dest-file');
                $mock->return_value(false);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Config\ConfigHelper $mockConfigHelper1 */
        $mockConfigHelper1 = $this->shmock(
            '\\Box\\TestScribe\\Config\\ConfigHelper',
            function (
                /** @var \Box\TestScribe\Config\ConfigHelper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->loadBootstrapFile();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getTestRootPath();
                $mock->return_value('test_root');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSourceFileRoot();
                $mock->return_value('source_root');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSourceFilePathRelativeToSourceRoot('source_root', 'input_source_file');
                $mock->return_value('/source_relative_path');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\OptionsConfig($mockConfigHelper1);

        $executionResult = $objectUnderTest->getOptions($mockInputInterface2, 'input_source_file');

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Config\\Options',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
