<?php
namespace Box\TestScribe\Config;

/**
 * Generated by TestScribe.
 */
class OutputConfigGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Config\OutputConfig::getOutputParams
     * @covers \Box\TestScribe\Config\OutputConfig
     */
    public function test_getOutputParams()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Config\Options $mockOptions2 */
        $mockOptions2 = $this->shmock(
            '\\Box\\TestScribe\\Config\\Options',
            function (
                /** @var \Box\TestScribe\Config\Options|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getOutSourceFileDir();
                $mock->return_value('out_source');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isOverwriteExistingDestinationFile();
                $mock->return_value(true);
            }
        );

        /** @var \Box\TestScribe\Config\ConfigParams $mockConfigParams3 */
        $mockConfigParams3 = $this->shmock(
            '\\Box\\TestScribe\\Config\\ConfigParams',
            function (
                /** @var \Box\TestScribe\Config\ConfigParams|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getFullClassName();
                $mock->return_value('\\input\\class');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getMethodName();
                $mock->return_value('in_method');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Config\OutputTestNameGetter $mockOutputTestNameGetter1 */
        $mockOutputTestNameGetter1 = $this->shmock(
            '\\Box\\TestScribe\\Config\\OutputTestNameGetter',
            function (
                /** @var \Box\TestScribe\Config\OutputTestNameGetter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getTestName('in_method', true);
                $mock->return_value('out_method');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\OutputConfig($mockOutputTestNameGetter1);

        $executionResult = $objectUnderTest->getOutputParams($mockOptions2, $mockConfigParams3);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Config\\ConfigParams',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{"file path":"out_source\\/classGenTest.php","class name":"\\\\input\\\\classGenTest","method name":"out_method"}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
