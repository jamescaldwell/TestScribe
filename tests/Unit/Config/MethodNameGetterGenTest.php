<?php
namespace Box\TestScribe\Config;

/**
 * Generated by TestScribe.
 */
class MethodNameGetterGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Config\MethodNameGetter::getTestMethodName
     * @covers \Box\TestScribe\Config\MethodNameGetter
     */
    public function test_from_cmd()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface */
        $mockInputInterface = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getArgument('method');
                $mock->return_value('test_method');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Config\MethodNameSelector $mockMethodNameSelector */
        $mockMethodNameSelector = $this->shmock(
            '\\Box\\TestScribe\\Config\\MethodNameSelector',
            function (
                /** @var \Box\TestScribe\Config\MethodNameSelector|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\MethodNameGetter($mockMethodNameSelector);

        $executionResult = $objectUnderTest->getTestMethodName($mockInputInterface, 'full_name');

        // Validate the execution result.

        $expected = 'test_method';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Config\MethodNameGetter::getTestMethodName
     * @covers \Box\TestScribe\Config\MethodNameGetter
     */
    public function test_select()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Symfony\Component\Console\Input\InputInterface $mockInputInterface */
        $mockInputInterface = $this->shmock(
            '\\Symfony\\Component\\Console\\Input\\InputInterface',
            function (
                /** @var \Symfony\Component\Console\Input\InputInterface|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getArgument('method');
                $mock->return_value('');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Config\MethodNameSelector $mockMethodNameSelector */
        $mockMethodNameSelector = $this->shmock(
            '\\Box\\TestScribe\\Config\\MethodNameSelector',
            function (
                /** @var \Box\TestScribe\Config\MethodNameSelector|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->selectTestMethodName('full_name');
                $mock->return_value('selected_method');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Config\MethodNameGetter($mockMethodNameSelector);

        $executionResult = $objectUnderTest->getTestMethodName($mockInputInterface, 'full_name');

        // Validate the execution result.

        $expected = 'selected_method';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
