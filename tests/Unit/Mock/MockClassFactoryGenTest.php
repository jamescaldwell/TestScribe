<?php
namespace Box\TestScribe\Mock;

/**
 * Generated by TestScribe.
 */
class MockClassFactoryGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Mock\MockClassFactory::create
     * @covers \Box\TestScribe\Mock\MockClassFactory
     */
    public function test_create()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Mock\MockClassService $mockMockClassService */
        $mockMockClassService = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockClassService',
            function (
                /** @var \Box\TestScribe\Mock\MockClassService|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        /** @var \Box\TestScribe\Mock\MockObjectNameMgr $mockMockObjectNameMgr */
        $mockMockObjectNameMgr = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockObjectNameMgr',
            function (
                /** @var \Box\TestScribe\Mock\MockObjectNameMgr|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getMockObjectName('Output');
                $mock->return_value('mockObjName');
            }
        );

        /** @var \Box\TestScribe\Mock\MockMgr $mockMockMgr */
        $mockMockMgr = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockMgr',
            function (
                /** @var \Box\TestScribe\Mock\MockMgr|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->addMock();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Mock\MockClassFactory($mockMockClassService, $mockMockObjectNameMgr, $mockMockMgr);

        $executionResult = $objectUnderTest->create('\\Box\\TestScribe\\Output', false, 'method_to_pass_through');

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Mock\\MockClass',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '"mock object ( mockObjName )"',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
