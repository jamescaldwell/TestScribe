<?php
namespace Box\TestScribe\Spec;

/**
 * Generated by TestScribe.
 */
class SavedSpecsGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Spec\SavedSpecs::loadExistingSpecs
     * @covers \Box\TestScribe\Spec\SavedSpecs
     */
    public function test_loadExistingSpecs()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Config\ConfigParams $mockConfigParams */
        $mockConfigParams = $this->shmock(
            '\\Box\\TestScribe\\Config\\ConfigParams',
            function (
                /** @var \Box\TestScribe\Config\ConfigParams|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\ClassInfo\PhpClassName $mockPhpClassName */
                $mockPhpClassName = $this->shmock(
                    '\\Box\\TestScribe\\ClassInfo\\PhpClassName',
                    function (
                        /** @var \Box\TestScribe\ClassInfo\PhpClassName|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getClassName();
                        $mock->return_value('className');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getPhpClassName();
                $mock->return_value($mockPhpClassName);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getFullClassName();
                $mock->return_value('full_class_name');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Spec\SpecPersistence $mockSpecPersistence */
        $mockSpecPersistence = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecPersistence',
            function (
                /** @var \Box\TestScribe\Spec\SpecPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass */
                $mockSpecsPerClass = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerClass',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadSpec('out_source_dir/className_ts.yaml', 'full_class_name');
                $mock->return_value($mockSpecsPerClass);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SavedSpecs($mockSpecPersistence);

        $executionResult = $objectUnderTest->loadExistingSpecs($mockConfigParams, 'out_source_dir');

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Spec\\SpecsPerClass',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
    }
}
