<?php
namespace Box\TestScribe\Spec;

/**
 * Generated by TestScribe.
 */
class SpecDetailRendererGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Spec\SpecDetailRenderer::genSpecDetail
     * @covers \Box\TestScribe\Spec\SpecDetailRenderer
     */
    public function test_genSpecDetail()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Execution\ExecutionResult $mockExecutionResult */
        $mockExecutionResult = $this->shmock(
            '\\Box\\TestScribe\\Execution\\ExecutionResult',
            function (
                /** @var \Box\TestScribe\Execution\ExecutionResult|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\ArgumentInfo\Arguments $mockArguments */
                $mockArguments = $this->shmock(
                    '\\Box\\TestScribe\\ArgumentInfo\\Arguments',
                    function (
                        /** @var \Box\TestScribe\ArgumentInfo\Arguments|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getValues();
                        $mock->return_value(['param1', 'param2']);
                    }
                );

                /** @var \Box\TestScribe\ArgumentInfo\Arguments $mockArguments1 */
                $mockArguments1 = $this->shmock(
                    '\\Box\\TestScribe\\ArgumentInfo\\Arguments',
                    function (
                        /** @var \Box\TestScribe\ArgumentInfo\Arguments|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getValues();
                        $mock->return_value(['constructor_param']);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getResultValue();
                $mock->return_value('result');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getMethodArguments();
                $mock->return_value($mockArguments);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getConstructorArguments();
                $mock->return_value($mockArguments1);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Config\GlobalComputedConfig $mockGlobalComputedConfig */
        $mockGlobalComputedConfig = $this->shmock(
            '\\Box\\TestScribe\\Config\\GlobalComputedConfig',
            function (
                /** @var \Box\TestScribe\Config\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getTestMethodName();
                $mock->return_value('test_method_name');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SpecDetailRenderer($mockGlobalComputedConfig);

        $executionResult = $objectUnderTest->genSpecDetail($mockExecutionResult);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Spec\\OneSpec',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
