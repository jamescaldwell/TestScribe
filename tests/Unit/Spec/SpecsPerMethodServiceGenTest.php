<?php
namespace Box\TestScribe\Spec;

/**
 * Generated by TestScribe.
 */
class SpecsPerMethodServiceGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Spec\SpecsPerMethodService::addOneSpec
     * @covers \Box\TestScribe\Spec\SpecsPerMethodService
     */
    public function test_addOneSpec()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod1 */
        $mockSpecsPerMethod1 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecs();
                $mock->return_value(['test2' => 'fake', 'test_name'=> 'fake2']);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getMethodName();
                $mock->return_value('method name');
            }
        );

        /** @var \Box\TestScribe\Spec\OneSpec $mockOneSpec2 */
        $mockOneSpec2 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\OneSpec',
            function (
                /** @var \Box\TestScribe\Spec\OneSpec|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getTestName();
                $mock->return_value('test_name');
            }
        );

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Spec\SpecsPerMethodService();

        $executionResult = $objectUnderTest->addOneSpec($mockSpecsPerMethod1, $mockOneSpec2);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Spec\\SpecsPerMethod',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
