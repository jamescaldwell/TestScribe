<?php
namespace Box\TestScribe\Spec;

/**
 * Generated by TestScribe.
 */
class SpecsPerClassServiceGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Spec\SpecsPerClassService::addOneSpec
     * @covers \Box\TestScribe\Spec\SpecsPerClassService
     */
    public function test_addOneSpec()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass2 */
        $mockSpecsPerClass2 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerClass',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod4 */
                $mockSpecsPerMethod4 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecsPerMethodByName('method_name');
                $mock->return_value($mockSpecsPerMethod4);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecs();
                $mock->return_value([]);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getFullClassName();
                $mock->return_value('full_class_name');
            }
        );

        /** @var \Box\TestScribe\Spec\OneSpec $mockOneSpec3 */
        $mockOneSpec3 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\OneSpec',
            function (
                /** @var \Box\TestScribe\Spec\OneSpec|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Spec\SpecsPerMethodService $mockSpecsPerMethodService1 */
        $mockSpecsPerMethodService1 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerMethodService',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerMethodService|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod5 */
                $mockSpecsPerMethod5 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->addOneSpec();
                $mock->return_value($mockSpecsPerMethod5);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SpecsPerClassService($mockSpecsPerMethodService1);

        $executionResult = $objectUnderTest->addOneSpec($mockSpecsPerClass2, 'method_name', $mockOneSpec3);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Spec\\SpecsPerClass',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
