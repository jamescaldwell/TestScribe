<?php
namespace Box\TestScribe\Spec;

/**
 * Generated by TestScribe.
 */
class SpecsPerMethodPersistenceGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Spec\SpecsPerMethodPersistence::encodeSpecsPerMethod
     * @covers \Box\TestScribe\Spec\SpecsPerMethodPersistence
     */
    public function test_encodeSpecsPerMethod()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod2 */
        $mockSpecsPerMethod2 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\OneSpec $mockOneSpec3 */
                $mockOneSpec3 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\OneSpec',
                    function (
                        /** @var \Box\TestScribe\Spec\OneSpec|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var \Box\TestScribe\Spec\OneSpec $mockOneSpec4 */
                $mockOneSpec4 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\OneSpec',
                    function (
                        /** @var \Box\TestScribe\Spec\OneSpec|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getMethodName();
                $mock->return_value('method_name');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecs();
                $mock->return_value(['t1' => $mockOneSpec3, 't2' => $mockOneSpec4]);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Spec\OneSpecPersistence $mockOneSpecPersistence1 */
        $mockOneSpecPersistence1 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\OneSpecPersistence',
            function (
                /** @var \Box\TestScribe\Spec\OneSpecPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->encodeOneSpec();
                $mock->return_value(['name' => 'test_name', 'result' => 1]);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->encodeOneSpec();
                $mock->return_value(['name' => 'test_name2', 'result' => 2]);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SpecsPerMethodPersistence($mockOneSpecPersistence1);

        $executionResult = $objectUnderTest->encodeSpecsPerMethod($mockSpecsPerMethod2);

        // Validate the execution result.

        $this->assertInternalType('array', $executionResult);
        $this->assertCount(2, $executionResult);
        $expected = 'method_name';
        $this->assertSame(
            $expected,
            $executionResult['name'],
            'Variable ( executionResult[\'name\'] ) doesn\'t have the expected value.'
        );
        $this->assertInternalType('array', $executionResult['tests']);
        $this->assertCount(2, $executionResult['tests']);
        $this->assertInternalType('array', $executionResult['tests'][0]);
        $this->assertCount(2, $executionResult['tests'][0]);
        $expected = 'test_name';
        $this->assertSame(
            $expected,
            $executionResult['tests'][0]['name'],
            'Variable ( executionResult[\'tests\'][0][\'name\'] ) doesn\'t have the expected value.'
        );
        $expected = 1;
        $this->assertSame(
            $expected,
            $executionResult['tests'][0]['result'],
            'Variable ( executionResult[\'tests\'][0][\'result\'] ) doesn\'t have the expected value.'
        );
        $this->assertInternalType('array', $executionResult['tests'][1]);
        $this->assertCount(2, $executionResult['tests'][1]);
        $expected = 'test_name2';
        $this->assertSame(
            $expected,
            $executionResult['tests'][1]['name'],
            'Variable ( executionResult[\'tests\'][1][\'name\'] ) doesn\'t have the expected value.'
        );
        $expected = 2;
        $this->assertSame(
            $expected,
            $executionResult['tests'][1]['result'],
            'Variable ( executionResult[\'tests\'][1][\'result\'] ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Spec\SpecsPerMethodPersistence::loadSpecsPerMethod
     * @covers \Box\TestScribe\Spec\SpecsPerMethodPersistence
     */
    public function test_loadSpecsPerMethod()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Spec\OneSpecPersistence $mockOneSpecPersistence1 */
        $mockOneSpecPersistence1 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\OneSpecPersistence',
            function (
                /** @var \Box\TestScribe\Spec\OneSpecPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\OneSpec $mockOneSpec2 */
                $mockOneSpec2 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\OneSpec',
                    function (
                        /** @var \Box\TestScribe\Spec\OneSpec|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getTestName();
                        $mock->return_value('test_name');
                    }
                );

                /** @var \Box\TestScribe\Spec\OneSpec $mockOneSpec3 */
                $mockOneSpec3 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\OneSpec',
                    function (
                        /** @var \Box\TestScribe\Spec\OneSpec|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getTestName();
                        $mock->return_value('test2');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadOneSpec(array (
                  'name' => 'test_name',
                  'result' => 1,
                ));
                $mock->return_value($mockOneSpec2);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadOneSpec(array (
                  'name' => 'test2',
                  'result' => 2,
                ));
                $mock->return_value($mockOneSpec3);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SpecsPerMethodPersistence($mockOneSpecPersistence1);

        $executionResult = $objectUnderTest->loadSpecsPerMethod(['name' => 'm1', 'tests' => [['name' => 'test_name', 'result' => 1], ['name' => 'test2', 'result' => 2] ]]);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Spec\\SpecsPerMethod',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
