<?php
namespace Box\TestScribe\Spec;

/**
 * Generated by TestScribe.
 */
class SpecsPerClassPersistenceGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Spec\SpecsPerClassPersistence::encodeSpecsPerClass
     * @covers \Box\TestScribe\Spec\SpecsPerClassPersistence
     */
    public function test_encodeSpecsPerClass()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass2 */
        $mockSpecsPerClass2 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerClass',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod3 */
                $mockSpecsPerMethod3 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod4 */
                $mockSpecsPerMethod4 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getFullClassName();
                $mock->return_value('class_name');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecs();
                $mock->return_value(['method' => $mockSpecsPerMethod3, 'method2' => $mockSpecsPerMethod4]);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Spec\SpecsPerMethodPersistence $mockSpecsPerMethodPersistence1 */
        $mockSpecsPerMethodPersistence1 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerMethodPersistence',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerMethodPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->encodeSpecsPerMethod();
                $mock->return_value(['encoded_method_specs']);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->encodeSpecsPerMethod();
                $mock->return_value(['encoded_method_specs_2']);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SpecsPerClassPersistence($mockSpecsPerMethodPersistence1);

        $executionResult = $objectUnderTest->encodeSpecsPerClass($mockSpecsPerClass2);

        // Validate the execution result.

        $this->assertInternalType('array', $executionResult);
        $this->assertCount(2, $executionResult);
        $expected = 'class_name';
        $this->assertSame(
            $expected,
            $executionResult['full_class_name'],
            'Variable ( executionResult[\'full class name\'] ) doesn\'t have the expected value.'
        );
        $this->assertInternalType('array', $executionResult['methods']);
        $this->assertCount(2, $executionResult['methods']);
        $this->assertInternalType('array', $executionResult['methods'][0]);
        $this->assertCount(1, $executionResult['methods'][0]);
        $expected = 'encoded_method_specs';
        $this->assertSame(
            $expected,
            $executionResult['methods'][0][0],
            'Variable ( executionResult[\'methods\'][0][0] ) doesn\'t have the expected value.'
        );
        $this->assertInternalType('array', $executionResult['methods'][1]);
        $this->assertCount(1, $executionResult['methods'][1]);
        $expected = 'encoded_method_specs_2';
        $this->assertSame(
            $expected,
            $executionResult['methods'][1][0],
            'Variable ( executionResult[\'methods\'][1][0] ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Spec\SpecsPerClassPersistence::loadSpecsPerClass
     * @covers \Box\TestScribe\Spec\SpecsPerClassPersistence
     */
    public function test_loadSpecsPerClass()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Spec\SpecsPerMethodPersistence $mockSpecsPerMethodPersistence1 */
        $mockSpecsPerMethodPersistence1 = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerMethodPersistence',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerMethodPersistence|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod2 */
                $mockSpecsPerMethod2 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getMethodName();
                        $mock->return_value('m1');
                    }
                );

                /** @var \Box\TestScribe\Spec\SpecsPerMethod $mockSpecsPerMethod3 */
                $mockSpecsPerMethod3 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerMethod',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerMethod|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getMethodName();
                        $mock->return_value('m2');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadSpecsPerMethod(array (
                  0 => 'm1',
                ));
                $mock->return_value($mockSpecsPerMethod2);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->loadSpecsPerMethod(array (
                  0 => 'm2',
                ));
                $mock->return_value($mockSpecsPerMethod3);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SpecsPerClassPersistence($mockSpecsPerMethodPersistence1);

        $executionResult = $objectUnderTest->loadSpecsPerClass(['full class name' => 'class_name', 'methods' =>  [['m1'], ['m2']]]);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Spec\\SpecsPerClass',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
