<?php
namespace Box\TestScribe\Spec;

/**
 * Generated by TestScribe.
 */
class SpecRendererGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Spec\SpecRenderer::genSpec
     * @covers \Box\TestScribe\Spec\SpecRenderer
     */
    public function test_genSpec()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Execution\ExecutionResult $mockExecutionResult */
        $mockExecutionResult = $this->shmock(
            '\\Box\\TestScribe\\Execution\\ExecutionResult',
            function (
                /** @var \Box\TestScribe\Execution\ExecutionResult|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Spec\SavedSpecs $mockSavedSpecs */
        $mockSavedSpecs = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SavedSpecs',
            function (
                /** @var \Box\TestScribe\Spec\SavedSpecs|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass */
                $mockSpecsPerClass = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerClass',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getSpecPerClass();
                $mock->return_value($mockSpecsPerClass);

                $shmock->saveNewSpec();
            }
        );

        /** @var \Box\TestScribe\Spec\SpecDetailRenderer $mockSpecDetailRenderer */
        $mockSpecDetailRenderer = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecDetailRenderer',
            function (
                /** @var \Box\TestScribe\Spec\SpecDetailRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\OneSpec $mockOneSpec */
                $mockOneSpec = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\OneSpec',
                    function (
                        /** @var \Box\TestScribe\Spec\OneSpec|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->genSpecDetail();
                $mock->return_value($mockOneSpec);
            }
        );

        /** @var \Box\TestScribe\Config\GlobalComputedConfig $mockGlobalComputedConfig */
        $mockGlobalComputedConfig = $this->shmock(
            '\\Box\\TestScribe\\Config\\GlobalComputedConfig',
            function (
                /** @var \Box\TestScribe\Config\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getMethodName();
                $mock->return_value('method_name');
            }
        );

        /** @var \Box\TestScribe\Spec\SpecsPerClassService $mockSpecsPerClassService */
        $mockSpecsPerClassService = $this->shmock(
            '\\Box\\TestScribe\\Spec\\SpecsPerClassService',
            function (
                /** @var \Box\TestScribe\Spec\SpecsPerClassService|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Spec\SpecsPerClass $mockSpecsPerClass1 */
                $mockSpecsPerClass1 = $this->shmock(
                    '\\Box\\TestScribe\\Spec\\SpecsPerClass',
                    function (
                        /** @var \Box\TestScribe\Spec\SpecsPerClass|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->addOneSpec();
                $mock->return_value($mockSpecsPerClass1);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Spec\SpecRenderer($mockSavedSpecs, $mockSpecDetailRenderer, $mockGlobalComputedConfig, $mockSpecsPerClassService);

        $objectUnderTest->genSpec($mockExecutionResult);
    }
}
