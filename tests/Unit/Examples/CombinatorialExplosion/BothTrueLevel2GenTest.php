<?php
namespace Box\TestScribe\Examples\CombinatorialExplosion;

/**
 * Generated by TestScribe.
 */
class BothTrueLevel2GenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2::f2
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2
     */
    public function test_f2_1()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue $mockBothTrue */
        $mockBothTrue = $this->shmock(
            '\\Box\\TestScribe\\Examples\\CombinatorialExplosion\\BothTrue',
            function (
                /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(false);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(false);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2($mockBothTrue);

        $executionResult = $objectUnderTest->f2(true, false, true, false);

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2::f2
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2
     */
    public function test_f2_2()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue $mockBothTrue */
        $mockBothTrue = $this->shmock(
            '\\Box\\TestScribe\\Examples\\CombinatorialExplosion\\BothTrue',
            function (
                /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(false);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(true);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2($mockBothTrue);

        $executionResult = $objectUnderTest->f2(true, false, true, false);

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2::f2
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2
     */
    public function test_f2_3()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue $mockBothTrue */
        $mockBothTrue = $this->shmock(
            '\\Box\\TestScribe\\Examples\\CombinatorialExplosion\\BothTrue',
            function (
                /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(true);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(false);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2($mockBothTrue);

        $executionResult = $objectUnderTest->f2(true, false, true, false);

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2::f2
     * @covers \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2
     */
    public function test_f2_4()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue $mockBothTrue */
        $mockBothTrue = $this->shmock(
            '\\Box\\TestScribe\\Examples\\CombinatorialExplosion\\BothTrue',
            function (
                /** @var \Box\TestScribe\Examples\CombinatorialExplosion\BothTrue|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(true);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->f1(true, false);
                $mock->return_value(true);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Examples\CombinatorialExplosion\BothTrueLevel2($mockBothTrue);

        $executionResult = $objectUnderTest->f2(true, false, true, false);

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
