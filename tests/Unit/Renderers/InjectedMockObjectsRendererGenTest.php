<?php
namespace Box\TestScribe\Renderers;

/**
 * Generated by PHPUnit_test_Generator.
 */
class InjectedMockObjectsRendererGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Renderers\InjectedMockObjectsRenderer::genMockedObjectStatements
     * @covers \Box\TestScribe\Renderers\InjectedMockObjectsRenderer
     */
    public function testGenMockedObjectStatements_no_mocks()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer $mockMultipleInjectedMocksRenderer0 */
        $mockMultipleInjectedMocksRenderer0 = $this->shmock(
            '\\Box\\TestScribe\\Renderers\\MultipleInjectedMocksRenderer',
            function (
                /** @var \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );/** @var \Box\TestScribe\Mock\InjectedMockMgr $mockInjectedMockMgr1 */
        $mockInjectedMockMgr1 = $this->shmock(
            '\\Box\\TestScribe\\Mock\\InjectedMockMgr',
            function (
                /** @var \Box\TestScribe\Mock\InjectedMockMgr|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInjectedMockedObjects();
                $mock->return_value([]);
            }
        );/** @var \Box\TestScribe\Config\GlobalComputedConfig $mockGlobalComputedConfig2 */
        $mockGlobalComputedConfig2 = $this->shmock(
            '\\Box\\TestScribe\\Config\\GlobalComputedConfig',
            function (
                /** @var \Box\TestScribe\Config\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );$objectUnderTest = new \Box\TestScribe\Renderers\InjectedMockObjectsRenderer($mockMultipleInjectedMocksRenderer0, $mockInjectedMockMgr1, $mockGlobalComputedConfig2);
        $executionResult = $objectUnderTest->genMockedObjectStatements();

        // Validate the execution result.

        $expected = '';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Renderers\InjectedMockObjectsRenderer::genMockedObjectStatements
     * @covers \Box\TestScribe\Renderers\InjectedMockObjectsRenderer
     */
    public function testGenMockedObjectStatements_with_mocks()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer $mockMultipleInjectedMocksRenderer0 */
        $mockMultipleInjectedMocksRenderer0 = $this->shmock(
            '\\Box\\TestScribe\\Renderers\\MultipleInjectedMocksRenderer',
            function (
                /** @var \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->genInjectionStatements(array (
                  0 => 'mocks',
                ), 'injection_method_name');
                $mock->return_value('mock statements');
            }
        );

        /** @var \Box\TestScribe\Mock\InjectedMockMgr $mockInjectedMockMgr1 */
        $mockInjectedMockMgr1 = $this->shmock(
            '\\Box\\TestScribe\\Mock\\InjectedMockMgr',
            function (
                /** @var \Box\TestScribe\Mock\InjectedMockMgr|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInjectedMockedObjects();
                $mock->return_value(['mocks']);
            }
        );

        /** @var \Box\TestScribe\Config\GlobalComputedConfig $mockGlobalComputedConfig2 */
        $mockGlobalComputedConfig2 = $this->shmock(
            '\\Box\\TestScribe\\Config\\GlobalComputedConfig',
            function (
                /** @var \Box\TestScribe\Config\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInjectMockedObjectMethodName();
                $mock->return_value('injection_method_name');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Renderers\InjectedMockObjectsRenderer($mockMultipleInjectedMocksRenderer0, $mockInjectedMockMgr1, $mockGlobalComputedConfig2);
        $executionResult = $objectUnderTest->genMockedObjectStatements();

        // Validate the execution result.

        $expected = 'mock statements';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Renderers\InjectedMockObjectsRenderer::genMockedObjectStatements
     * @covers \Box\TestScribe\Renderers\InjectedMockObjectsRenderer
     */
    public function testGenMockedObjectStatements_throw_exception_when_injection_method_is_not_provided()
    {
        $this->setExpectedException('Box\\TestScribe\\Exception\\TestScribeException');

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer $mockMultipleInjectedMocksRenderer0 */
        $mockMultipleInjectedMocksRenderer0 = $this->shmock(
            '\\Box\\TestScribe\\Renderers\\MultipleInjectedMocksRenderer',
            function (
                /** @var \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        /** @var \Box\TestScribe\Mock\InjectedMockMgr $mockInjectedMockMgr1 */
        $mockInjectedMockMgr1 = $this->shmock(
            '\\Box\\TestScribe\\Mock\\InjectedMockMgr',
            function (
                /** @var \Box\TestScribe\Mock\InjectedMockMgr|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInjectedMockedObjects();
                $mock->return_value(['mocks']);
            }
        );

        /** @var \Box\TestScribe\Config\GlobalComputedConfig $mockGlobalComputedConfig2 */
        $mockGlobalComputedConfig2 = $this->shmock(
            '\\Box\\TestScribe\\Config\\GlobalComputedConfig',
            function (
                /** @var \Box\TestScribe\Config\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInjectMockedObjectMethodName();
                $mock->return_value('');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Renderers\InjectedMockObjectsRenderer($mockMultipleInjectedMocksRenderer0, $mockInjectedMockMgr1, $mockGlobalComputedConfig2);
        $objectUnderTest->genMockedObjectStatements();
    }
}
