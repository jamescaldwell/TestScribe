<?php
namespace Box\TestScribe\Renderers;

/**
 * Generated by PHPUnit_test_Generator.
 */
class MultipleInjectedMocksRendererGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer::genInjectionStatements
     * @covers \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer
     */
    public function testGenInjectionStatements()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Mock\MockClass $mockMockClass1 */
        $mockMockClass1 = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockClass',
            function (
                /** @var \Box\TestScribe\Mock\MockClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );
        /** @var \Box\TestScribe\Mock\MockClass $mockMockClass2 */
        $mockMockClass2 = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockClass',
            function (
                /** @var \Box\TestScribe\Mock\MockClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Renderers\OneInjectedMockRenderer $mockOneInjectedMockRenderer0 */
        $mockOneInjectedMockRenderer0 = $this->shmock(
            '\\Box\\TestScribe\\Renderers\\OneInjectedMockRenderer',
            function (
                /** @var \Box\TestScribe\Renderers\OneInjectedMockRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->genInjectedMockStatement();
                $mock->return_value('create and inject mock A');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->genInjectedMockStatement();
                $mock->return_value('mock B');
            }
        );
        $objectUnderTest = new \Box\TestScribe\Renderers\MultipleInjectedMocksRenderer(
            $mockOneInjectedMockRenderer0
        );
        $executionResult = $objectUnderTest->genInjectionStatements(
            ['classA' => $mockMockClass1, 'classB' => $mockMockClass2],
            'inject_method_name'
        );

        // Validate the execution result.

        $expected =
            'create and inject mock A' . "\n" .
            '' . "\n" .
            'mock B';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
