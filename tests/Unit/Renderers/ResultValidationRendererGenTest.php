<?php
namespace Box\TestScribe\Renderers;

/**
 * Generated by TestScribe.
 */
class ResultValidationRendererGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Renderers\ResultValidationRenderer::genResultValidation
     * @covers \Box\TestScribe\Renderers\ResultValidationRenderer
     */
    public function testGenResultValidation_validate()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\ExecutionResult $mockExecutionResult2 */
        $mockExecutionResult2 = $this->shmock(
            '\\Box\\TestScribe\\ExecutionResult',
            function (
                /** @var \Box\TestScribe\ExecutionResult|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getResultValue();
                $mock->return_value('result');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Renderers\ValueAssertionRenderer $mockValueAssertionRenderer1 */
        $mockValueAssertionRenderer1 = $this->shmock(
            '\\Box\\TestScribe\\Renderers\\ValueAssertionRenderer',
            function (
                /** @var \Box\TestScribe\Renderers\ValueAssertionRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->generate('executionResult', 'result');
                $mock->return_value('validation code');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Renderers\ResultValidationRenderer($mockValueAssertionRenderer1);

        $executionResult = $objectUnderTest->genResultValidation(true, $mockExecutionResult2);

        // Validate the execution result.

        $expected = '// Validate the execution result.' . "\n" .
        '' . "\n" .
        'validation code';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Renderers\ResultValidationRenderer::genResultValidation
     * @covers \Box\TestScribe\Renderers\ResultValidationRenderer
     */
    public function testGenResultValidation_no_validation()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\ExecutionResult $mockExecutionResult2 */
        $mockExecutionResult2 = $this->shmock(
            '\\Box\\TestScribe\\ExecutionResult',
            function (
                /** @var \Box\TestScribe\ExecutionResult|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Renderers\ValueAssertionRenderer $mockValueAssertionRenderer1 */
        $mockValueAssertionRenderer1 = $this->shmock(
            '\\Box\\TestScribe\\Renderers\\ValueAssertionRenderer',
            function (
                /** @var \Box\TestScribe\Renderers\ValueAssertionRenderer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Renderers\ResultValidationRenderer($mockValueAssertionRenderer1);

        $executionResult = $objectUnderTest->genResultValidation(false, $mockExecutionResult2);

        // Validate the execution result.

        $expected = '';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
