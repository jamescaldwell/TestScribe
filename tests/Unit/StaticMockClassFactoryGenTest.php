<?php
namespace Box\TestScribe;

/**
 * Generated by PHPUnit_test_Generator.
 */
class StaticMockClassFactoryGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\StaticMockClassFactory::createAndLoadStaticMockClass
     * @covers Box\TestScribe\StaticMockClassFactory
     */
    public function testCreateAndLoadStaticMockClass()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\MockClassFactory $mockMockClassFactory0 */
        $mockMockClassFactory0 = $this->shmock(
            '\\Box\\TestScribe\\MockClassFactory',
            function (
                /** @var \Box\TestScribe\MockClassFactory|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\MockClass $mockMockClass4 */
                $mockMockClass4 = $this->shmock(
                    '\\Box\\TestScribe\\MockClass',
                    function (
                        /** @var \Box\TestScribe\MockClass|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getMockObjectName();
                        $mock->return_value('mock object name');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->create('class name', true, '');
                $mock->return_value($mockMockClass4);
            }
        );
        /** @var \Box\TestScribe\Output $mockOutput1 */
        $mockOutput1 = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeln('Mocked ( class name ) id ( mock object name ) for static methods invocation.' . "\n" . '');
            }
        );
        /** @var \Box\TestScribe\ClassBuilderStatic $mockClassBuilderStatic2 */
        $mockClassBuilderStatic2 = $this->shmock(
            '\\Box\\TestScribe\\ClassBuilderStatic',
            function (
                /** @var \Box\TestScribe\ClassBuilderStatic|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->create();
            }
        );
        $objectUnderTest = new \Box\TestScribe\StaticMockClassFactory($mockMockClassFactory0, $mockOutput1, $mockClassBuilderStatic2);
        $executionResult = $objectUnderTest->createAndLoadStaticMockClass('class name');

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\MockClass',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
    }

}
