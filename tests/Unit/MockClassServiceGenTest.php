<?php
namespace Box\TestScribe;

/**
 * Generated by PHPUnit_test_Generator.
 */
class MockClassServiceGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\MockClassService::invokeInterceptedCall
     * @covers \Box\TestScribe\MockClassService
     */
    public function testInvokeInterceptedCall()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Mock\MockClass $mockMockClass5 */
        $mockMockClass5 = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockClass',
            function (
                /** @var \Box\TestScribe\Mock\MockClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\PhpClass $mockPhpClass6 */
                $mockPhpClass6 = $this->shmock(
                    '\\Box\\TestScribe\\PhpClass',
                    function (
                        /** @var \Box\TestScribe\PhpClass|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getPhpClass();
                $mock->return_value($mockPhpClass6);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\MockClassServiceCallInfo $mockMockClassServiceCallInfo1 */
        $mockMockClassServiceCallInfo1 = $this->shmock(
            '\\Box\\TestScribe\\MockClassServiceCallInfo',
            function (
                /** @var \Box\TestScribe\MockClassServiceCallInfo|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->showCallInfo();
            }
        );

        /** @var \Box\TestScribe\MockClassServiceInfoSaver $mockMockClassServiceInfoSaver2 */
        $mockMockClassServiceInfoSaver2 = $this->shmock(
            '\\Box\\TestScribe\\MockClassServiceInfoSaver',
            function (
                /** @var \Box\TestScribe\MockClassServiceInfoSaver|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->gatherAndSaveCallInfo();
                $mock->return_value(1);
            }
        );

        /** @var \Box\TestScribe\MethodHelper $mockMethodHelper3 */
        $mockMethodHelper3 = $this->shmock(
            '\\Box\\TestScribe\\MethodHelper',
            function (
                /** @var \Box\TestScribe\MethodHelper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Method $mockMethod7 */
                $mockMethod7 = $this->shmock(
                    '\\Box\\TestScribe\\Method',
                    function (
                        /** @var \Box\TestScribe\Method|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->createFromMethodName();
                $mock->return_value($mockMethod7);
            }
        );

        /** @var \Box\TestScribe\Output $mockOutput4 */
        $mockOutput4 = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeStartSeparator();

                $shmock->writeEndSeparator();
            }
        );

        $objectUnderTest = new \Box\TestScribe\MockClassService($mockMockClassServiceCallInfo1, $mockMockClassServiceInfoSaver2, $mockMethodHelper3, $mockOutput4);

        $executionResult = $objectUnderTest->invokeInterceptedCall($mockMockClass5, 'methodName', ['args']);

        // Validate the execution result.

        $expected = 1;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
