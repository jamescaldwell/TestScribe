<?php
namespace Box\TestScribe;

/**
 * Generated by PHPUnit_test_Generator.
 */
class InputValueGetterGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\InputValueGetter::get
     */
    public function testGetClassWithSimpleClassName()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\PHPDoc\IPhpDoc $mockIPhpDoc2 */
        $mockIPhpDoc2 = $this->shmock(
            '\\Box\\TestScribe\\PHPDoc\\IPhpDoc',
            function (
                /** @var \Box\TestScribe\PHPDoc\IPhpDoc|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isClass();
                $mock->return_value(true);
                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getRepresentation();
                $mock->return_value('FooClass');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\StringToInputValueConverter $mockStringToInputValueConverter0 */
        $mockStringToInputValueConverter0 = $this->shmock(
            '\\Box\\TestScribe\\Input\\StringToInputValueConverter',
            function (
                /** @var \Box\TestScribe\Input\StringToInputValueConverter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Input\InputValue $mockInputValue4 */
                $mockInputValue4 = $this->shmock(
                    '\\Box\\TestScribe\\Input\\InputValue',
                    function (
                        /** @var \Box\TestScribe\Input\InputValue|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        // Keep track of the order of calls made on this mock.
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getValue('\\FooClass');
                $mock->return_value($mockInputValue4);
            }
        );
        /** @var \Box\TestScribe\InputWithHistory $mockInputWithHistory1 */
        $mockInputWithHistory1 = $this->shmock(
            '\\Box\\TestScribe\\InputWithHistory',
            function (
                /** @var \Box\TestScribe\InputWithHistory|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

            }
        );
        $objectUnderTest = new Input\InputValueGetter($mockStringToInputValueConverter0, $mockInputWithHistory1);
        $executionResult = $objectUnderTest->get($mockIPhpDoc2, 'subject', 'className', 'methodName', 'paramName');

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\TestScribe\Input\InputValue',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
    }
    
    /**
     * @covers Box\TestScribe\InputValueGetter::get
     */
    public function testGetNonClass()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\PHPDoc\IPhpDoc $mockIPhpDoc2 */
        $mockIPhpDoc2 = $this->shmock(
            '\\Box\\TestScribe\\PHPDoc\\IPhpDoc',
            function (
                /** @var \Box\TestScribe\PHPDoc\IPhpDoc|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isClass();
                $mock->return_value(false);
                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isVoid();
                $mock->return_value(false);
                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getRepresentation();
                $mock->return_value('type_string');
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\StringToInputValueConverter $mockStringToInputValueConverter0 */
        $mockStringToInputValueConverter0 = $this->shmock(
            '\\Box\\TestScribe\\Input\\StringToInputValueConverter',
            function (
                /** @var \Box\TestScribe\Input\StringToInputValueConverter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Input\InputValue $mockInputValue4 */
                $mockInputValue4 = $this->shmock(
                    '\\Box\\TestScribe\\Input\\InputValue',
                    function (
                        /** @var \Box\TestScribe\Input\InputValue|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        // Keep track of the order of calls made on this mock.
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getValue('user_input_string');
                $mock->return_value($mockInputValue4);
            }
        );
        /** @var \Box\TestScribe\InputWithHistory $mockInputWithHistory1 */
        $mockInputWithHistory1 = $this->shmock(
            '\\Box\\TestScribe\\InputWithHistory',
            function (
                /** @var \Box\TestScribe\InputWithHistory|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInputValue('subject, type ( type_string )', 'className', 'methodName', 'paramName');
                $mock->return_value('user_input_string');
            }
        );
        $objectUnderTest = new Input\InputValueGetter($mockStringToInputValueConverter0, $mockInputWithHistory1);
        $executionResult = $objectUnderTest->get($mockIPhpDoc2, 'subject', 'className', 'methodName', 'paramName');

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Input\\InputValue',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
    }

    /**
     * @covers Box\TestScribe\InputValueGetter::get
     */
    public function testGetVoidType()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\PHPDoc\IPhpDoc $mockIPhpDoc2 */
        $mockIPhpDoc2 = $this->shmock(
            '\\Box\\TestScribe\\PHPDoc\\IPhpDoc',
            function (
                /** @var \Box\TestScribe\PHPDoc\IPhpDoc|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
                $shmock->dont_preserve_original_methods();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isClass();
                $mock->return_value(false);
                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isVoid();
                $mock->return_value(true);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\StringToInputValueConverter $mockStringToInputValueConverter0 */
        $mockStringToInputValueConverter0 = $this->shmock(
            '\\Box\\TestScribe\\Input\\StringToInputValueConverter',
            function (
                /** @var \Box\TestScribe\Input\StringToInputValueConverter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Input\InputValue $mockInputValue4 */
                $mockInputValue4 = $this->shmock(
                    '\\Box\\TestScribe\\Input\\InputValue',
                    function (
                        /** @var \Box\TestScribe\Input\InputValue|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getValue('void');
                $mock->return_value($mockInputValue4);
            }
        );
        /** @var \Box\TestScribe\InputWithHistory $mockInputWithHistory1 */
        $mockInputWithHistory1 = $this->shmock(
            '\\Box\\TestScribe\\InputWithHistory',
            function (
                /** @var \Box\TestScribe\InputWithHistory|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

            }
        );
        $objectUnderTest = new Input\InputValueGetter($mockStringToInputValueConverter0, $mockInputWithHistory1);
        $executionResult = $objectUnderTest->get($mockIPhpDoc2, 'subject', 'className', 'methodName', 'paramName');

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Input\\InputValue',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
    }

}
