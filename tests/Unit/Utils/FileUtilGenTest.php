<?php
namespace Box\TestScribe\Utils;

/**
 * Generated by TestScribe.
 */
class FileUtilGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Utils\DirectoryUtil::createDirectoriesWhenNeeded
     * @covers \Box\TestScribe\Utils\DirectoryUtil
     */
    public function test_create_dir()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
        $mockFileFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->is_dir('path/to/dir');
                $mock->return_value(false);

                $shmock->mkdirRecursive('path/to/dir', 493);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Utils\FileUtil($mockFileFunctionWrapper);

        $executionResult = $objectUnderTest->createDirectoriesWhenNeeded('path/to/dir');

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\DirectoryUtil::createDirectoriesWhenNeeded
     * @covers \Box\TestScribe\Utils\DirectoryUtil
     */
    public function test_dir_already_exist()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
        $mockFileFunctionWrapper = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
            function (
                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->is_dir('path/to/dir');
                $mock->return_value(true);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Utils\FileUtil($mockFileFunctionWrapper);

        $executionResult = $objectUnderTest->createDirectoriesWhenNeeded('path/to/dir');

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\DirectoryUtil::createDirectoriesWhenNeededForFile
     * @covers \Box\TestScribe\Utils\DirectoryUtil
     */
    public function test_createDirectoriesWhenNeededForFile()
    {
        // Execute the method under test.

        /** @var \Box\TestScribe\Utils\FileUtil $mockDirectoryUtil */
        $mockDirectoryUtil = $this->shmock(
            '\\Box\\TestScribe\\Utils\\FileUtil',
            function (
                /** @var \Box\TestScribe\Utils\FileUtil|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();

                // Setup mocks for parameters to the constructor.

                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
                $mockFileFunctionWrapper = $this->shmock(
                    '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
                    function (
                        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                $shmock->set_constructor_arguments($mockFileFunctionWrapper);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->createDirectoriesWhenNeeded('path/to');
                $mock->return_value(true);
            }
        );

        $executionResult = $mockDirectoryUtil->createDirectoriesWhenNeededForFile('path/to/file');

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\DirectoryUtil::putContent
     * @covers \Box\TestScribe\Utils\DirectoryUtil
     */
    public function test_putContent()
    {
        // Execute the method under test.

        /** @var \Box\TestScribe\Utils\FileUtil $mockDirectoryUtil */
        $mockDirectoryUtil = $this->shmock(
            '\\Box\\TestScribe\\Utils\\FileUtil',
            function (
                /** @var \Box\TestScribe\Utils\FileUtil|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();

                // Setup mocks for parameters to the constructor.

                /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper $mockFileFunctionWrapper */
                $mockFileFunctionWrapper = $this->shmock(
                    '\\Box\\TestScribe\\FunctionWrappers\\FileFunctionWrapper',
                    function (
                        /** @var \Box\TestScribe\FunctionWrappers\FileFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->file_put_contents('path/to/file', 'data');
                        $mock->return_value(10);
                    }
                );

                $shmock->set_constructor_arguments($mockFileFunctionWrapper);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->createDirectoriesWhenNeededForFile('path/to/file');
                $mock->return_value(true);
            }
        );

        $mockDirectoryUtil->putContent('path/to/file', 'data');
    }
}
