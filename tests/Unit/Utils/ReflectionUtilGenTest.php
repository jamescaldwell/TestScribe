<?php
namespace Box\TestScribe\Utils;

/**
 * Generated by TestScribe.
 */
class ReflectionUtilGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Utils\ReflectionUtil::isAbstractClass
     * @covers \Box\TestScribe\Utils\ReflectionUtil
     */
    public function test_isAbstractClass_concrete_class_return_false()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Output $mockOutput */
        $mockOutput = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Utils\ReflectionUtil($mockOutput);

        $executionResult = $objectUnderTest->isAbstractClass('\Box\TestScribe\_fixture\_input\Calculator');

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\ReflectionUtil::isAbstractClass
     * @covers \Box\TestScribe\Utils\ReflectionUtil
     */
    public function test_isAbstractClass_abstract_class_return_true()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Output $mockOutput */
        $mockOutput = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Utils\ReflectionUtil($mockOutput);

        $executionResult = $objectUnderTest->isAbstractClass('\Box\TestScribe\_fixture\_input\TestAbstractClass');

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
