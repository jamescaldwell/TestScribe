<?php
namespace Box\TestScribe\Utils;

/**
 * Generated by PHPUnit_test_Generator.
 */
class DirectoryUtilGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\Utils\DirectoryUtil::createDirectoriesWhenNeeded
     */
    public function testCreateDirectoriesWhenNeededDirAlreadyExists()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\GlobalFunction $mockGlobalFunction0 */
        $mockGlobalFunction0 = $this->shmock(
            '\\Box\\TestScribe\\GlobalFunction',
            function (
                /** @var \Box\TestScribe\GlobalFunction|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->__call('is_dir', array (
                  0 => 'foo_dir',
                ));
                $mock->return_value(true);
            }
        );
        $objectUnderTest = new \Box\TestScribe\Utils\DirectoryUtil($mockGlobalFunction0);
        $executionResult = $objectUnderTest->createDirectoriesWhenNeeded('foo_dir');

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers Box\TestScribe\Utils\DirectoryUtil::createDirectoriesWhenNeeded
     */
    public function testCreateDirectoriesWhenNeeded()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\GlobalFunction $mockGlobalFunction0 */
        $mockGlobalFunction0 = $this->shmock(
            '\\Box\\TestScribe\\GlobalFunction',
            function (
                /** @var \Box\TestScribe\GlobalFunction|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->__call('is_dir', array (
                  0 => 'foo_dir',
                ));
                $mock->return_value(false);
                /** @var $mock \Shmock\Spec */
                $mock = $shmock->__call('mkdir', array (
                  0 => 'foo_dir',
                  1 => 493,
                  2 => true,
                ));
                $mock->return_value(true);
            }
        );
        $objectUnderTest = new \Box\TestScribe\Utils\DirectoryUtil($mockGlobalFunction0);
        $executionResult = $objectUnderTest->createDirectoriesWhenNeeded('foo_dir');

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers Box\TestScribe\Utils\DirectoryUtil::createDirectoriesWhenNeededForFile
     */
    public function testCreateDirectoriesWhenNeededForFile()
    {

        // Execute the method under test.

        /** @var \Box\TestScribe\Utils\DirectoryUtil $mockDirectoryUtil1 */
        $mockDirectoryUtil1 = $this->shmock(
            '\\Box\\TestScribe\\Utils\\DirectoryUtil',
            function (
                /** @var \Box\TestScribe\Utils\DirectoryUtil|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();

                // Setup mocks for parameters to the constructor.

                /** @var \Box\TestScribe\GlobalFunction $mockGlobalFunction0 */
                $mockGlobalFunction0 = $this->shmock(
                    '\\Box\\TestScribe\\GlobalFunction',
                    function (
                        /** @var \Box\TestScribe\GlobalFunction|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        // Keep track of the order of calls made on this mock.
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                    }
                );
                $shmock->set_constructor_arguments($mockGlobalFunction0);

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->createDirectoriesWhenNeeded('/foo/bar');
                $mock->return_value(true);
            }
        );
        $executionResult = $mockDirectoryUtil1->createDirectoriesWhenNeededForFile('/foo/bar/file.txt');

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
