<?php
namespace Box\TestScribe\Utils;

/**
 * Generated by TestScribe.
 */
class ArrayUtilGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\Utils\ArrayUtil::lookupValueByKey
     */
    public function testLookupValueByKeyExist()
    {
        // Execute the method under test.

        $executionResult = ArrayUtil::lookupValueByKey('k', ['k' => 1], null);

        // Validate the execution result.

        $expected = 1;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers Box\TestScribe\Utils\ArrayUtil::lookupValueByKey
     */
    public function testLookupValueByKeyDoesNotExist()
    {
        // Execute the method under test.

        $executionResult = ArrayUtil::lookupValueByKey('k', ['foo' => 2], 0);

        // Validate the execution result.

        $expected = 0;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers \Box\TestScribe\Utils\ArrayUtil::joinNonEmptyStringsWithNewLine
     * @covers \Box\TestScribe\Utils\ArrayUtil
     */
    public function testJoinNonEmptyStringsWithNewLine()
    {
        // Execute the method under test.


        $executionResult = \Box\TestScribe\Utils\ArrayUtil::joinNonEmptyStringsWithNewLine(
            ['', 'a', '', 'b'],
            2
        );

        // Validate the execution result.

        $expected =
            'a' . "\n" .
            "\n" .
            'b';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\ArrayUtil::joinNonEmptyStringsWithNewLine
     * @covers \Box\TestScribe\Utils\ArrayUtil
     */
    public function testJoinNonEmptyStringsWithNewLine_empty_strings_only()
    {
        // Execute the method under test.

        $executionResult = \Box\TestScribe\Utils\ArrayUtil::joinNonEmptyStringsWithNewLine([''], 2);

        // Validate the execution result.

        $expected = '';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue
     * @covers \Box\TestScribe\Utils\ArrayUtil
     */
    public function test_lookupBoolValue()
    {
        // Execute the method under test.

        $executionResult = \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue('k', ['k' => true], false);

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue
     * @covers \Box\TestScribe\Utils\ArrayUtil
     */
    public function test_value_is_wrong_type()
    {
        // Execute the method under test.

        $executionResult = \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue('k', ['k' => 'foo'], true);

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue
     * @covers \Box\TestScribe\Utils\ArrayUtil
     */
    public function test_key_does_not_exist()
    {
        // Execute the method under test.

        $executionResult = \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue('k', ['another' => false], true);

        // Validate the execution result.

        $expected = true;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue
     * @covers \Box\TestScribe\Utils\ArrayUtil
     */
    public function test_wrong_default_value_type_raise_exception()
    {
        $this->setExpectedException('Box\\TestScribe\\Exception\\TestScribeException');

        // Execute the method under test.

        \Box\TestScribe\Utils\ArrayUtil::lookupBoolValue('k', ['another' => true], 'a');
    }
}
