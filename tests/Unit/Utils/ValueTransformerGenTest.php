<?php
namespace Box\TestScribe\Utils;

/**
 * Generated by TestScribe.
 */
class ValueTransformerGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\Utils\ValueTransformer::translateObjectsAndResourceToString
     */
    public function testTranslateObjectsAndResourceToString_string()
    {

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\ValueTransformer();
        $executionResult = $objectUnderTest->translateObjectsAndResourceToString('simple');

        // Validate the execution result.

        $expected = 'simple';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers Box\TestScribe\Utils\ValueTransformer::translateObjectsAndResourceToString
     */
    public function testTranslateObjectsAndResourceToString_int()
    {

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\ValueTransformer();
        $executionResult = $objectUnderTest->translateObjectsAndResourceToString(1);

        // Validate the execution result.

        $expected = 1;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers Box\TestScribe\Utils\ValueTransformer::translateObjectsAndResourceToString
     */
    public function testTranslateObjectsAndResourceToString_float()
    {

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\ValueTransformer();
        $executionResult = $objectUnderTest->translateObjectsAndResourceToString(1.1);

        // Validate the execution result.

        $expected = 1.1;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers Box\TestScribe\Utils\ValueTransformer::translateObjectsAndResourceToString
     */
    public function testTranslateObjectsAndResourceToString_bool()
    {

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\ValueTransformer();
        $executionResult = $objectUnderTest->translateObjectsAndResourceToString(false);

        // Validate the execution result.

        $expected = false;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers Box\TestScribe\Utils\ValueTransformer::translateObjectsAndResourceToString
     */
    public function testTranslateObjectsAndResourceToString_null()
    {

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\ValueTransformer();
        $executionResult = $objectUnderTest->translateObjectsAndResourceToString(null);

        // Validate the execution result.

        $expected = NULL;
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers Box\TestScribe\Utils\ValueTransformer::translateObjectsAndResourceToString
     */
    public function testTranslateObjectsAndResourceToString_simple_array()
    {

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\ValueTransformer();
        $executionResult = $objectUnderTest->translateObjectsAndResourceToString(['a']);

        // Validate the execution result.

        $this->assertInternalType('array', $executionResult);
        $this->assertCount(1, $executionResult);
        $expected = 'a';
        $this->assertSame(
            $expected,
            $executionResult[0],
            'Variable ( executionResult[0] ) doesn\'t have the expected value.'
        );
    }

}
