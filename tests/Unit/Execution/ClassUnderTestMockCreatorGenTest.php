<?php
namespace Box\TestScribe\Execution;

/**
 * Generated by TestScribe.
 */
class ClassUnderTestMockCreatorGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Execution\ClassUnderTestMockCreator::createMockObjectForTheClassUnderTest
     * @covers \Box\TestScribe\Execution\ClassUnderTestMockCreator
     */
    public function test_createMockObjectForTheClassUnderTest()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\Mock\MockClass $mockMockClass */
        $mockMockClass = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockClass',
            function (
                /** @var \Box\TestScribe\Mock\MockClass|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\MethodInfo\Method $mockMethod */
                $mockMethod = $this->shmock(
                    '\\Box\\TestScribe\\MethodInfo\\Method',
                    function (
                        /** @var \Box\TestScribe\MethodInfo\Method|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getConstructorOfTheMockedClass();
                $mock->return_value($mockMethod);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Mock\MockObjectFactory $mockMockObjectFactory */
        $mockMockObjectFactory = $this->shmock(
            '\\Box\\TestScribe\\Mock\\MockObjectFactory',
            function (
                /** @var \Box\TestScribe\Mock\MockObjectFactory|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        /** @var \Box\TestScribe\ArgumentInfo\ArgumentsCollector $mockArgumentsCollector */
        $mockArgumentsCollector = $this->shmock(
            '\\Box\\TestScribe\\ArgumentInfo\\ArgumentsCollector',
            function (
                /** @var \Box\TestScribe\ArgumentInfo\ArgumentsCollector|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\ArgumentInfo\Arguments $mockArguments */
                $mockArguments = $this->shmock(
                    '\\Box\\TestScribe\\ArgumentInfo\\Arguments',
                    function (
                        /** @var \Box\TestScribe\ArgumentInfo\Arguments|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getValues();
                        $mock->return_value(['constructor args']);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->collect();
                $mock->return_value($mockArguments);
            }
        );

        /** @var \Box\TestScribe\Output $mockOutput */
        $mockOutput = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeln('' . "\n" .
                'Start executing the constructor.' . "\n" .
                '');

                $shmock->writeln('' . "\n" .
                'Finish executing the constructor.' . "\n" .
                '');
            }
        );

        /** @var \Box\TestScribe\Execution\ExpectedExceptionCatcher $mockExpectedExceptionCatcher */
        $mockExpectedExceptionCatcher = $this->shmock(
            '\\Box\\TestScribe\\Execution\\ExpectedExceptionCatcher',
            function (
                /** @var \Box\TestScribe\Execution\ExpectedExceptionCatcher|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Execution\ExecutionResultWithExceptionValue $mockExecutionResultWithExceptionValue */
                $mockExecutionResultWithExceptionValue = $this->shmock(
                    '\\Box\\TestScribe\\Execution\\ExecutionResultWithExceptionValue',
                    function (
                        /** @var \Box\TestScribe\Execution\ExecutionResultWithExceptionValue|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getResult();
                        $mock->return_value('result');

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getException();
                        $mock->return_value(null);
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->execute();
                $mock->return_value($mockExecutionResultWithExceptionValue);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Execution\ClassUnderTestMockCreator($mockMockObjectFactory, $mockArgumentsCollector, $mockOutput, $mockExpectedExceptionCatcher);

        $executionResult = $objectUnderTest->createMockObjectForTheClassUnderTest($mockMockClass);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Execution\\ClassUnderTestMockCreationResultValue',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );

        $this->assertSame(
            '{}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );

    }
}
