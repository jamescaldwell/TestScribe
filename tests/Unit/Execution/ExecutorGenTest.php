<?php
namespace Box\TestScribe\Execution;

/**
 * Generated by TestScribe.
 */
class ExecutorGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Execution\Executor::runMethod
     * @covers \Box\TestScribe\Execution\Executor
     */
    public function test_runMethod_static()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Config\GlobalComputedConfig $mockGlobalComputedConfig */
        $mockGlobalComputedConfig = $this->shmock(
            '\\Box\\TestScribe\\Config\\GlobalComputedConfig',
            function (
                /** @var \Box\TestScribe\Config\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isMethodStatic();
                $mock->return_value(true);
            }
        );

        /** @var \Box\TestScribe\Execution\StaticMethodExecutor $mockStaticMethodExecutor */
        $mockStaticMethodExecutor = $this->shmock(
            '\\Box\\TestScribe\\Execution\\StaticMethodExecutor',
            function (
                /** @var \Box\TestScribe\Execution\StaticMethodExecutor|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Execution\StaticExecutionResultValue $mockStaticExecutionResultValue */
                $mockStaticExecutionResultValue = $this->shmock(
                    '\\Box\\TestScribe\\Execution\\StaticExecutionResultValue',
                    function (
                        /** @var \Box\TestScribe\Execution\StaticExecutionResultValue|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->runStaticMethod();
                $mock->return_value($mockStaticExecutionResultValue);
            }
        );

        /** @var \Box\TestScribe\Execution\InstanceMethodExecutor $mockInstanceMethodExecutor */
        $mockInstanceMethodExecutor = $this->shmock(
            '\\Box\\TestScribe\\Execution\\InstanceMethodExecutor',
            function (
                /** @var \Box\TestScribe\Execution\InstanceMethodExecutor|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Execution\Executor($mockGlobalComputedConfig, $mockStaticMethodExecutor, $mockInstanceMethodExecutor);

        $executionResult = $objectUnderTest->runMethod();

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Execution\\StaticExecutionResultValue',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
    }

    /**
     * @covers \Box\TestScribe\Execution\Executor::runMethod
     * @covers \Box\TestScribe\Execution\Executor
     */
    public function test_runMethod_instance()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Config\GlobalComputedConfig $mockGlobalComputedConfig */
        $mockGlobalComputedConfig = $this->shmock(
            '\\Box\\TestScribe\\Config\\GlobalComputedConfig',
            function (
                /** @var \Box\TestScribe\Config\GlobalComputedConfig|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->isMethodStatic();
                $mock->return_value(false);
            }
        );

        /** @var \Box\TestScribe\Execution\StaticMethodExecutor $mockStaticMethodExecutor */
        $mockStaticMethodExecutor = $this->shmock(
            '\\Box\\TestScribe\\Execution\\StaticMethodExecutor',
            function (
                /** @var \Box\TestScribe\Execution\StaticMethodExecutor|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        /** @var \Box\TestScribe\Execution\InstanceMethodExecutor $mockInstanceMethodExecutor */
        $mockInstanceMethodExecutor = $this->shmock(
            '\\Box\\TestScribe\\Execution\\InstanceMethodExecutor',
            function (
                /** @var \Box\TestScribe\Execution\InstanceMethodExecutor|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Execution\InstanceMethodExecutionResultValue $mockInstanceMethodExecutionResultValue */
                $mockInstanceMethodExecutionResultValue = $this->shmock(
                    '\\Box\\TestScribe\\Execution\\InstanceMethodExecutionResultValue',
                    function (
                        /** @var \Box\TestScribe\Execution\InstanceMethodExecutionResultValue|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->runInstanceMethod();
                $mock->return_value($mockInstanceMethodExecutionResultValue);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Execution\Executor($mockGlobalComputedConfig, $mockStaticMethodExecutor, $mockInstanceMethodExecutor);

        $executionResult = $objectUnderTest->runMethod();

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Execution\\InstanceMethodExecutionResultValue',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
    }
}
