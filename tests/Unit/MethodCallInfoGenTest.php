<?php
namespace Box\TestScribe;

/**
 * Generated by TestScribe.
 */
class MethodCallInfoGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\MethodCallInfo::getCallParamInfo
     * @covers \Box\TestScribe\MethodCallInfo
     */
    public function testGetCallParamInfo_one_argument()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\MethodInfo\Method $mockMethod2 */
        $mockMethod2 = $this->shmock(
            '\\Box\\TestScribe\\MethodInfo\\Method',
            function (
                /** @var \Box\TestScribe\MethodInfo\Method|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Parameter $mockParameter3 */
                $mockParameter3 = $this->shmock(
                    '\\Box\\TestScribe\\Parameter',
                    function (
                        /** @var \Box\TestScribe\Parameter|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getName();
                        $mock->return_value('param1');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getParameters();
                $mock->return_value([$mockParameter3]);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Utils\ValueFormatter $mockValueFormatter1 */
        $mockValueFormatter1 = $this->shmock(
            '\\Box\\TestScribe\\Utils\\ValueFormatter',
            function (
                /** @var \Box\TestScribe\Utils\ValueFormatter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getReadableFormat('arg');
                $mock->return_value('arg_f');
            }
        );

        $objectUnderTest = new \Box\TestScribe\MethodCallInfo($mockValueFormatter1);

        $executionResult = $objectUnderTest->getCallParamInfo($mockMethod2, ['arg']);

        // Validate the execution result.

        $expected = '' . "\n" .
        '  $param1 = arg_f' . "\n" .
        ')';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\MethodCallInfo::getCallParamInfo
     * @covers \Box\TestScribe\MethodCallInfo
     */
    public function testGetCallParamInfo_two_arguments()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\MethodInfo\Method $mockMethod2 */
        $mockMethod2 = $this->shmock(
            '\\Box\\TestScribe\\MethodInfo\\Method',
            function (
                /** @var \Box\TestScribe\MethodInfo\Method|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Parameter $mockParameter3 */
                $mockParameter3 = $this->shmock(
                    '\\Box\\TestScribe\\Parameter',
                    function (
                        /** @var \Box\TestScribe\Parameter|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getName();
                        $mock->return_value('param1');
                    }
                );

                /** @var \Box\TestScribe\Parameter $mockParameter4 */
                $mockParameter4 = $this->shmock(
                    '\\Box\\TestScribe\\Parameter',
                    function (
                        /** @var \Box\TestScribe\Parameter|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getName();
                        $mock->return_value('param2');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getParameters();
                $mock->return_value([$mockParameter3, $mockParameter4]);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Utils\ValueFormatter $mockValueFormatter1 */
        $mockValueFormatter1 = $this->shmock(
            '\\Box\\TestScribe\\Utils\\ValueFormatter',
            function (
                /** @var \Box\TestScribe\Utils\ValueFormatter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getReadableFormat('arg1');
                $mock->return_value('arg1_f');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getReadableFormat('arg2');
                $mock->return_value('arg2_f');
            }
        );

        $objectUnderTest = new \Box\TestScribe\MethodCallInfo($mockValueFormatter1);

        $executionResult = $objectUnderTest->getCallParamInfo($mockMethod2, ['arg1', 'arg2']);

        // Validate the execution result.

        $expected = '' . "\n" .
        '  $param1 = arg1_f' . "\n" .
        '  $param2 = arg2_f' . "\n" .
        ')';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\MethodCallInfo::getCallParamInfo
     * @covers \Box\TestScribe\MethodCallInfo
     */
    public function testGetCallParamInfo_more_arguments_than_expected()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\MethodInfo\Method $mockMethod2 */
        $mockMethod2 = $this->shmock(
            '\\Box\\TestScribe\\MethodInfo\\Method',
            function (
                /** @var \Box\TestScribe\MethodInfo\Method|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                // Set up mocks of return values.

                /** @var \Box\TestScribe\Parameter $mockParameter3 */
                $mockParameter3 = $this->shmock(
                    '\\Box\\TestScribe\\Parameter',
                    function (
                        /** @var \Box\TestScribe\Parameter|\Shmock\PHPUnitMockInstance $shmock */
                        $shmock
                    ) {
                        $shmock->order_matters();
                        $shmock->disable_original_constructor();

                        /** @var $mock \Shmock\Spec */
                        $mock = $shmock->getName();
                        $mock->return_value('param');
                    }
                );

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getParameters();
                $mock->return_value([$mockParameter3]);
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Utils\ValueFormatter $mockValueFormatter1 */
        $mockValueFormatter1 = $this->shmock(
            '\\Box\\TestScribe\\Utils\\ValueFormatter',
            function (
                /** @var \Box\TestScribe\Utils\ValueFormatter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getReadableFormat('arg1');
                $mock->return_value('arg1_f');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getReadableFormat('arg2');
                $mock->return_value('arg2_f');
            }
        );

        $objectUnderTest = new \Box\TestScribe\MethodCallInfo($mockValueFormatter1);

        $executionResult = $objectUnderTest->getCallParamInfo($mockMethod2, ['arg1', 'arg2']);

        // Validate the execution result.

        $expected = '' . "\n" .
        '  $param = arg1_f' . "\n" .
        'This argument of value ( arg2_f ) is unexpected.' . "\n" .
        ')';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\MethodCallInfo::getCallParamInfo
     * @covers \Box\TestScribe\MethodCallInfo
     */
    public function testGetCallParamInfo_no_argument()
    {
        // Setup mocks for parameters to the method under test.

        /** @var \Box\TestScribe\MethodInfo\Method $mockMethod2 */
        $mockMethod2 = $this->shmock(
            '\\Box\\TestScribe\\MethodInfo\\Method',
            function (
                /** @var \Box\TestScribe\MethodInfo\Method|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Utils\ValueFormatter $mockValueFormatter1 */
        $mockValueFormatter1 = $this->shmock(
            '\\Box\\TestScribe\\Utils\\ValueFormatter',
            function (
                /** @var \Box\TestScribe\Utils\ValueFormatter|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\MethodCallInfo($mockValueFormatter1);

        $executionResult = $objectUnderTest->getCallParamInfo($mockMethod2, []);

        // Validate the execution result.

        $expected = ')';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
