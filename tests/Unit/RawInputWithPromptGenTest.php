<?php
namespace Box\TestScribe;

/**
 * Generated by TestScribe.
 */
class RawInputWithPromptGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\Input\RawInputWithPrompt::getString
     */
    public function testGetString()
    {
        // Setup mocks for parameters to the constructor.

        $mockRawInput0 = $this->shmock(
            '\\Box\\TestScribe\\Input\\RawInput',
            function (
                $shmock
                /** @var \Box\TestScribe\Input\RawInput|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

                $mock = $shmock->getString();
                /** @var $mock \Shmock\Spec */
                $mock->return_value('input');
            }
        );
        $mockOutput1 = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                $shmock
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

                $shmock->writeln('>');
            }
        );

        // Execute the method under test.

        $objectUnderTest = new Input\RawInputWithPrompt($mockRawInput0, $mockOutput1);
        $executionResult = $objectUnderTest->getString('sub');

        // Validate the execution result.

        $expected = 'input';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

}
