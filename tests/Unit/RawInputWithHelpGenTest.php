<?php
namespace Box\TestScribe;

/**
 * Generated by PHPUnit_test_Generator.
 */
class RawInputWithHelpGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\RawInputWithHelp::getString
     */
    public function testGetStringDefault()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\RawInputWithPrompt $mockRawInputWithPrompt0 */
        $mockRawInputWithPrompt0 = $this->shmock(
            '\\Box\\TestScribe\\Input\\RawInputWithPrompt',
            function (
                /** @var \Box\TestScribe\Input\RawInputWithPrompt|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getString();
                $mock->return_value('');
            }
        );
        /** @var \Box\TestScribe\Output $mockOutput1 */
        $mockOutput1 = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeln('Provide the s.' . "\n" . 'Type return for the default value ( d ).');
            }
        );
        $objectUnderTest = new Input\RawInputWithHelp($mockRawInputWithPrompt0, $mockOutput1);
        $executionResult = $objectUnderTest->getString('s', 'd');

        // Validate the execution result.

        $expected = 'd';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\RawInputWithHelp::getString
     * @covers \Box\TestScribe\RawInputWithHelp
     */
    public function testGetString_show_help()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\RawInputWithPrompt $mockRawInputWithPrompt1 */
        $mockRawInputWithPrompt1 = $this->shmock(
            '\\Box\\TestScribe\\Input\\RawInputWithPrompt',
            function (
                /** @var \Box\TestScribe\Input\RawInputWithPrompt|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getString();
                $mock->return_value('h');

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getString();
                $mock->return_value('input');
            }
        );

        /** @var \Box\TestScribe\Output $mockOutput2 */
        $mockOutput2 = $this->shmock(
            '\\Box\\TestScribe\\Output',
            function (
                /** @var \Box\TestScribe\Output|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                $shmock->writeln('Provide the subject.' . "\n" .
                'Type return for the default value ( default value ).');

                $shmock->writeln('-------------------------------------------------------------' . "\n" .
                'Input help:' . "\n" .
                '' . "\n" .
                '+++ Value input:' . "\n" .
                '' . "\n" .
                'Specify the input in PHP format.' . "\n" .
                '' . "\n" .
                'Use fully qualified class names in place of object variables. ' . "\n" .
                'They will be mocked automatically.' . "\n" .
                '' . "\n" .
                'Use the word void to select the default value for a parameter,' . "\n" .
                'or a void return value.' . "\n" .
                '' . "\n" .
                'e.g. ' . "\n" .
                '' . "\n" .
                '"ab", \'a\', "a\\n" ' . "\n" .
                'true, false, 1, null, ' . "\n" .
                '["a", "b"], ["a" => 2], ["a" => ["b" => [ 1, 2]]] ' . "\n" .
                '\\ClassFoo , \\Namespace1\\ClassBar' . "\n" .
                '[\\ClassFoo, \\ClassBar]' . "\n" .
                '[\'key\' => \\ClassFoo]' . "\n" .
                'void' . "\n" .
                '' . "\n" .
                '' . "\n" .
                '+++ Other commands:' . "\n" .
                '' . "\n" .
                'a : abort this test generation run.' . "\n" .
                '' . "\n" .
                'End of help' . "\n" .
                '=============================================================');
            }
        );

        $objectUnderTest = new Input\RawInputWithHelp($mockRawInputWithPrompt1, $mockOutput2);

        $executionResult = $objectUnderTest->getString('subject', 'default value');

        // Validate the execution result.

        $expected = 'input';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
