<?php
namespace Box\TestScribe\Input;

/**
 * Generated by TestScribe.
 */
class RawInputWithHelpGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Input\RawInputWithHelp::getString
     * @covers \Box\TestScribe\Input\RawInputWithHelp
     */
    public function test_getString()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\InputHelper $mockInputHelper1 */
        $mockInputHelper1 = $this->shmock(
            '\\Box\\TestScribe\\Input\\InputHelper',
            function (
                /** @var \Box\TestScribe\Input\InputHelper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInputString('Provide the subject.');
                $mock->return_value('user_input');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Input\RawInputWithHelp($mockInputHelper1);

        $executionResult = $objectUnderTest->getString('subject', '');

        // Validate the execution result.

        $expected = 'user_input';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Input\RawInputWithHelp::getString
     * @covers \Box\TestScribe\Input\RawInputWithHelp
     */
    public function test_getString_with_default()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\InputHelper $mockInputHelper1 */
        $mockInputHelper1 = $this->shmock(
            '\\Box\\TestScribe\\Input\\InputHelper',
            function (
                /** @var \Box\TestScribe\Input\InputHelper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInputString('Provide the subject.' . "\n" .
                'Type return for the default value ( default ). Type \'h\' for help.');
                $mock->return_value('');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Input\RawInputWithHelp($mockInputHelper1);

        $executionResult = $objectUnderTest->getString('subject', 'default');

        // Validate the execution result.

        $expected = 'default';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Input\RawInputWithHelp::pause
     * @covers \Box\TestScribe\Input\RawInputWithHelp
     */
    public function test_pause()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\InputHelper $mockInputHelper1 */
        $mockInputHelper1 = $this->shmock(
            '\\Box\\TestScribe\\Input\\InputHelper',
            function (
                /** @var \Box\TestScribe\Input\InputHelper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getInputString('Press enter to continue...');
                $mock->return_value('');
            }
        );

        $objectUnderTest = new \Box\TestScribe\Input\RawInputWithHelp($mockInputHelper1);

        $objectUnderTest->pause();
    }
}
