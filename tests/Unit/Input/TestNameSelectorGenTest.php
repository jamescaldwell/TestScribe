<?php
namespace Box\TestScribe\Input;

/**
 * Generated by TestScribe.
 */
class TestNameSelectorGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers \Box\TestScribe\Input\TestNameSelector::selectTestName
     * @covers \Box\TestScribe\Input\TestNameSelector
     */
    public function test_no_existing()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\MenuSelector $mockMenuSelector */
        $mockMenuSelector = $this->shmock(
            '\\Box\\TestScribe\\Input\\MenuSelector',
            function (
                /** @var \Box\TestScribe\Input\MenuSelector|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();
            }
        );

        $objectUnderTest = new \Box\TestScribe\Input\TestNameSelector($mockMenuSelector);

        $executionResult = $objectUnderTest->selectTestName([]);

        // Validate the execution result.

        $expected = '';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Input\TestNameSelector::selectTestName
     * @covers \Box\TestScribe\Input\TestNameSelector
     */
    public function test_existing()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\MenuSelector $mockMenuSelector */
        $mockMenuSelector = $this->shmock(
            '\\Box\\TestScribe\\Input\\MenuSelector',
            function (
                /** @var \Box\TestScribe\Input\MenuSelector|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->selectFromMenu(
                    array(
                        0 =>
                            'Add a new test.',
                        1 => 't1',
                        2 => 't2',
                    )
                );
                $mock->return_value(1);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Input\TestNameSelector($mockMenuSelector);

        $executionResult = $objectUnderTest->selectTestName(['t1', 't2']);

        // Validate the execution result.

        $expected = 't1';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

    /**
     * @covers \Box\TestScribe\Input\TestNameSelector::selectTestName
     * @covers \Box\TestScribe\Input\TestNameSelector
     */
    public function test_select_new_test()
    {
        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Input\MenuSelector $mockMenuSelector */
        $mockMenuSelector = $this->shmock(
            '\\Box\\TestScribe\\Input\\MenuSelector',
            function (
                /** @var \Box\TestScribe\Input\MenuSelector|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->selectFromMenu(
                    array(
                        0 =>
                            'Add a new test.',
                        1 => 't1',
                        2 => 't2',
                    )
                );
                $mock->return_value(0);
            }
        );

        $objectUnderTest = new \Box\TestScribe\Input\TestNameSelector($mockMenuSelector);

        $executionResult = $objectUnderTest->selectTestName(['t1', 't2']);

        // Validate the execution result.

        $expected = '';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
