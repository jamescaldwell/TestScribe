<?php
namespace Box\TestScribe\Utils;

/**
 * Generated by PHPUnit_test_Generator.
 *
 */
class CallInformationCollectorGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;
    
    // @TODO (ryang 1/14/15) : Add a test about the exception case.
    
    /**
     * @covers Box\TestScribe\Utils\CallInformationCollector::getCallerInfoAt
     */
    public function testGetCallerInfoAt()
    {
        // Setup mocks for parameters to the constructor.

        $mockStackTraceFunctionWrapper0 = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\StackTraceFunctionWrapper',
            function (
                $shmock
                /** @var \Box\TestScribe\FunctionWrappers\StackTraceFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

                $mock = $shmock->debugBacktrace();
                /** @var $mock \Shmock\Spec */
                $mock->return_value([['file' => 'Foo file', 'line' => '10']]);
            }
        );

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\CallInformationCollector($mockStackTraceFunctionWrapper0);
        $executionResult = $objectUnderTest->getCallerInfoAt(0);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Utils\\CallInfo',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
        $this->assertSame(
            '{"fileName":"Foo file","lineNumberString":"10"}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }


    /**
     * @covers Box\TestScribe\Utils\CallInformationCollector::getCallerInfoAt
     */
    public function testGetCallerInfoAtNoFileInfo()
    {
        // Setup mocks for parameters to the constructor.

        $mockStackTraceFunctionWrapper0 = $this->shmock(
            '\\Box\\TestScribe\\FunctionWrappers\\StackTraceFunctionWrapper',
            function (
                $shmock
                /** @var \Box\TestScribe\FunctionWrappers\StackTraceFunctionWrapper|\Shmock\PHPUnitMockInstance $shmock */
            ) {
                // Keep track of the order of calls made on this mock.
                $shmock->order_matters();
                // Mock all methods, return null by default unless overwritten by the expectations below.
                $shmock->dont_preserve_original_methods();
                $shmock->disable_original_constructor();

                $mock = $shmock->debugBacktrace();
                /** @var $mock \Shmock\Spec */
                $mock->return_value([['foo' => 'bar']]);
            }
        );

        // Execute the method under test.

        $objectUnderTest = new \Box\TestScribe\Utils\CallInformationCollector($mockStackTraceFunctionWrapper0);
        $executionResult = $objectUnderTest->getCallerInfoAt(0);

        // Validate the execution result.

        $this->assertInstanceOf(
            'Box\\TestScribe\\Utils\\CallInfo',
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected type.'
        );
        $this->assertSame(
            '{"fileName":"unknown","lineNumberString":"unknown"}',
            json_encode($executionResult),
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }

}
