<?php
namespace Box\TestScribe\Utils;

/**
 * Generated by PHPUnit_test_Generator.
 */
class ValueFormatterGenTest extends \PHPUnit_Framework_TestCase
{
    use \Shmock\Shmockers;

    /**
     * @covers Box\TestScribe\Utils\ValueFormatter::getReadableFormat
     */
    public function testGetReadableFormat()
    {

        // Execute the method under test.

        // Setup mocks for parameters to the constructor.

        /** @var \Box\TestScribe\Utils\ValueTransformer $mockValueTransformer0 */
        $mockValueTransformer0 = $this->shmock(
            '\\Box\\TestScribe\\Utils\\ValueTransformer',
            function (
                /** @var \Box\TestScribe\Utils\ValueTransformer|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->translateObjectsAndResourceToString('input');
                $mock->return_value('transformed');
            }
        );
        /** @var \Box\TestScribe\Utils\ValueFormatterHelper $mockValueFormatterHelper1 */
        $mockValueFormatterHelper1 = $this->shmock(
            '\\Box\\TestScribe\\Utils\\ValueFormatterHelper',
            function (
                /** @var \Box\TestScribe\Utils\ValueFormatterHelper|\Shmock\PHPUnitMockInstance $shmock */
                $shmock
            ) {
                $shmock->order_matters();
                $shmock->disable_original_constructor();

                /** @var $mock \Shmock\Spec */
                $mock = $shmock->getReadableFormatFromSimpleValue('transformed');
                $mock->return_value('result');
            }
        );
        $objectUnderTest = new \Box\TestScribe\Utils\ValueFormatter($mockValueTransformer0, $mockValueFormatterHelper1);
        $executionResult = $objectUnderTest->getReadableFormat('input');

        // Validate the execution result.

        $expected = 'result';
        $this->assertSame(
            $expected,
            $executionResult,
            'Variable ( executionResult ) doesn\'t have the expected value.'
        );
    }
}
